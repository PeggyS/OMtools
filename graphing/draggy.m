% draggy.m: Called by dragger.  Performs the grunt work% involved with various user actions.% Written by:  Jonathan Jacobs%              March 1997 - January 1998  (last mod: 01/10/98)function draggy(action)global drag_z drag_y drag_x drag_h drag_pos drag_hListglobal dataLockX dataLockY dataLockZglobal startXPt startYPt startZPt newXPt newYPt newZPtga = gca;gf = get(ga,'Parent');pt = get(ga,'Currentpoint');drag_hand = findobj(drag_hList,'Tag','dragThis');if isempty(drag_hand)   returnenddrag_h = drag_hand(1);if strcmp(action, 'down')   %disp('down!')	set(gf,'Pointer','crosshair');	   startXPt = pt(1,1);   startYPt = pt(1,2);   startZPt = pt(1,3);		if strcmp( get(drag_h, 'Type'), 'line')      %disp('Line!')	   drag_x = get(drag_h,'XData'); initX = drag_x(1);	   drag_y = get(drag_h,'YData'); initY = drag_y(1);	   drag_z = get(drag_h,'ZData'); if ~isempty(drag_z),initZ = drag_z(1); end		set(drag_h,'UserData',[initX, initY])  %, initZ])	 elseif strcmp( get(drag_h, 'Type'), 'text')      %disp('Text!')	   drag_pos = get(drag_h, 'Pos');	 elseif strcmp( get(drag_h, 'Type'), 'patch')      %disp('Patch!')	   drag_x = get(drag_h, 'XData'); initX = drag_x(1);	   drag_y = get(drag_h, 'YData'); initY = drag_y(1);	   drag_z = get(drag_h, 'ZData'); if ~isempty(drag_z),initZ = drag_z(1); end		set(drag_h,'UserData',[initX, initY])  %, initZ])	end		% setup for mouse movement or release	%set(drag_h,'ButtonDownFcn','');	set(gf,'WindowButtonMotionFcn', 'draggy(''move'')');	set(gf,'WindowButtonUpFcn', 'draggy(''up'')'); elseif strcmp(action, 'move')   %disp('move!')   newXPt = pt(1,1);   newYPt = pt(1,2);   newZPt = pt(1,3);	delta_x = newXPt - startXPt;	delta_y = newYPt - startYPt;	delta_z = newZPt - startZPt;	if strcmp( get(drag_h, 'Type'), 'line')      if ~dataLockX,set(drag_h, 'XData', drag_x+delta_x); end      if ~dataLockY,set(drag_h, 'YData', drag_y+delta_y); end      if ~dataLockZ,set(drag_h, 'ZData', drag_z+delta_z); end	 elseif strcmp( get(drag_h, 'Type'), 'patch')	   set(drag_h, 'XData', drag_x+delta_x);	   set(drag_h, 'YData', drag_y+delta_y);	   set(drag_h, 'ZData', drag_z+delta_z);	 elseif strcmp( get(drag_h, 'Type'), 'text')	   set(drag_h, 'Pos',...	    [drag_pos(1)+delta_x...	     drag_pos(2)+delta_y...	     drag_pos(3)+delta_z]);	end elseif strcmp(action, 'up')   %disp('up!')	%stopXPt = pt(1,1);	%stopYPt = pt(1,2);	%stopZPt = pt(1,3);	set(gf,'Pointer','arrow');	% setup for mouse movement or release	if strcmp( get(drag_h, 'Type'), 'line') || strcmp( get(drag_h, 'Type'), 'patch')		temp = get(drag_h,'XData'); newX = temp(1);		temp = get(drag_h,'YData'); newY = temp(1);		%temp = get(drag_h,'ZData'); newZ = temp(1);		initPt = get(drag_h,'UserData');		initX = initPt(1);		initY = initPt(2);		%initZ = initPt(3);		disp(['Shifted by: ' num2str(newX-initX) ' X, ' num2str(newY-initY) ' Y'])	end		set(drag_h,'ButtonDownFcn','draggy(''down'')');	set(gf,'WindowButtonMotionFcn','');	set(gf,'WindowButtonUpFcn','');	clear global drag_h drag_z drag_y drag_x drag_pos	clear global newZPt newYPt newXPt startZPt startYPt startXPt elseif strcmp(action, 'tggl')   %disp('tggl!')	set(drag_h,'Tag','');                   % no longer the current line	set(drag_h,'ButtonDownFcn','draggy(''tggl'')');	set(gco,'Tag','dragThis');      % this is now the current line	set(gco,'ButtonDownFcn','draggy(''down'')');end