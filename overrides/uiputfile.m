%UIPUTFILE Standard save file dialog box.%   [FILENAME, PATHNAME, FILTERINDEX] = UIPUTFILE(FILTERSPEC, TITLE)%   displays a dialog box for the user to fill in and returns the%   filename and path strings and the index of the selected filter.%   A successful return occurs if a valid filename is specified. If an%   existing filename is specified or selected, a warning message is%   displayed. The user may select Yes to use the filename or No to%   return to the dialog to select another filename.%%   The FILTERSPEC parameter determines the initial display of files in%   the dialog box.  For example '*.m' lists all the MATLAB M-files.  If%   FILTERSPEC is a cell array, the first column is used as the list of%   extensions, and the second column is used as the list of descriptions.%%   When FILTERSPEC is a string or a cell array, "All files" is appended%   to the list.%%   When FILTERSPEC is empty the default list of file types is used.%%   When FILTERSPEC is a filename, it is used as the default filename and%   the file's extension is used as the default filter.%%   Parameter TITLE is a string containing the title of the dialog%   box.%%   The output variable FILENAME is a string containing the name of the file%   selected in the dialog box.  If the user presses Cancel, it is set to 0.%%   The output variable PATH is a string containing the name of the path%   selected in the dialog box.  If the user presses Cancel, it is set to 0.%%   The output variable FILTERINDEX returns the index of the filter selected%   in the dialog box. The indexing starts at 1. If the user presses Cancel,%   it is set to 0.%%   [FILENAME, PATHNAME, FILTERINDEX] = UIPUTFILE(FILTERSPEC, TITLE, FILE)%   FILE is a string containing the name to use as the default selection.%%   Examples:%%   [filename, pathname] = uiputfile('matlab.mat', 'Save Workspace as');%%   [filename, pathname] = uiputfile('*.mat', 'Save Workspace as');%%   [filename, pathname, filterindex] = uiputfile( ...%      {'*.m;*.fig;*.mat;*.mdl', 'All MATLAB Files (*.m, *.fig, *.mat, *.mdl)';%       '*.m',  'M-files (*.m)'; ...%       '*.fig','Figures (*.fig)'; ...%       '*.mat','MAT-files (*.mat)'; ...%       '*.mdl','Models (*.mdl)'; ...%       '*.*',  'All Files (*.*)'}, ...%       'Save as');%%   [filename, pathname, filterindex] = uiputfile( ...%      {'*.mat','MAT-files (*.mat)'; ...%       '*.mdl','Models (*.mdl)'; ...%       '*.*',  'All Files (*.*)'}, ...%       'Save as', 'Untitled.mat');%%   Note, multiple extensions with no descriptions must be separated by semi-%   colons.%%   [filename, pathname] = uiputfile( ...%      {'*.m';'*.mdl';'*.mat';'*.*'}, ...%       'Save as');%%   Associate multiple extensions with one description like this:%%   [filename, pathname] = uiputfile( ...%      {'*.m;*.fig;*.mat;*.mdl', 'All MATLAB Files (*.m, *.fig, *.mat, *.mdl)'; ...%       '*.*',                   'All Files (*.*)'}, ...%       'Save as');%%   This code checks if the user pressed cancel on the dialog.%%   [filename, pathname] = uiputfile('*.m', 'Pick an M-file');%   if isequal(filename,0) || isequal(pathname,0)%      disp('User pressed cancel')%   else%      disp(['User selected ', fullfile(pathname, filename)])%   end%%%   See also UIGETDIR, UIGETFILE.%% UIPUTFILE -- the sequel!% Replace the standard, highly limited javax.swing.jfilechooser file dialog box with the% much more useful java.awt.FileDialog box.  This is mostly for the benefit of OS X users% because the swing file chooser really is crippled.%% To REALLY get the most out of file dialogs in OS X, buy the excellent enhancement% "Default Folder X" from St. Clair Software.  I have no connection to this product other% than as a very satisfied customer.%% To use this (and UIGETFILE and UIGETDIR replacements), place it in a folder on your MARLAB% path that loads BEFORE the MATLAB toolboxes.  I suggest creating a directory called % "overrides" (or something similar) and adding it to the top if the PATH list.% Written by:  Jonathan Jacobs%              June 2009 - Sept 2011 (last mod: 09/13/11)function [filename, pathname, filterindex] = uiputfile(varargin)% UIPUTFILE can be called in many different ways.  The first argument can either be% the filterspec or the starting save name.  This is all very confusing.if nargin == 3	filterspec = varargin{1};	db_title = varargin{2};	startname = varargin{3};endif nargin == 2	db_title = varargin{2};endif nargin == 2 | nargin == 1	% decide how to handle the filterspec argument.  If it is a cell array, it will have	% two columns -- the extensions and the descriptions.  If it is a string, then it will	% be either a real filterspec ('*.something') or the name that the file should be saved as.    filterspec = varargin{1};	if isstr(varargin{1})		if findstr(varargin{1},'*')			;		 else		   % also use it as the starting filename		   startname = varargin{1};		end	  else	   ;	endendif nargin == 0	filterspec = '*.*';	%extenlist = '*.*';    %descriplist = 'All Files';end% let's get the filterspec list of extensions and descriptions.  We will put them% into a small window that will be displayed alongside the uiputfile window.[r,c]=size(filterspec);if iscell(filterspec)	extenlist = filterspec(:,1);	if c == 2		descriplist = filterspec(:,2);	 else	    descriplist = extenlist;	end  else  	if ischar(filterspec)  		extenlist{1} = filterspec;  		descriplist{1} = '';  	endend% create the window, calculate the size (based on number of extensions)win_hgt = (r*35)+5;exten_wind = figure('Position',[250,win_hgt+150,200,win_hgt],'toolbar','none','menubar','none',...					'visible','off','resize','off','numbertitle','off','name','Save As:');% partial workaround for ML bug #301358 -- incorrect monitor size reported for dual-monitor systems% still will be wrong, but a wrong normalized value is a bit less odious than a wrong pixel valueset(exten_wind,'Units','normal');old_pos = get(exten_wind,'Position');new_pos = [.1 0.5-old_pos(4)/2 old_pos(3) old_pos(4)];set(exten_wind,'Position',new_pos,'Visible','on')set(exten_wind,'Units','pixels');% create the extensionlist buttons and descriptionlist text boxes.for i=1:r	uicontrol('Style','Pushbutton','Position',[5,win_hgt-(i*35), 50,30],'String',extenlist(i))	uicontrol('Style','Text','Position',[60,win_hgt-(i*35),135,30], 'String', descriplist(i))end% Flush the graphics queue and force the window to draw.  It won't without this command.drawnow% make sure java classes are loadedimport java.awt.Frame java.awt.FileDialog% If all the input tests above somehow failed, this is the last-ditch effort to% set default arguments for the inputsif ~exist('db_title'),   db_title = 'Save as:'; endif ~exist('startname'),  startname = '';  end% clean up the startname if needed -- strip away superfluous pathname information.  If I % were more ambitious I would test the string to each instance of the separator to see if% it is a valid path and therefore the separator was used as a path delimiter and not as % an actual filename character.  But then I got high.[comp, maxsize] = computer;vers=version;if comp(1) == 'M' & vers(1)<='5' % 'classic' Mac OS -- R.I.P.   sep  = ':';                    elseif comp(1) == 'P'           % PC   sep  = '\';  else                            % Unix (including Mac OS X)   sep  = '/';endpathseps = findstr(startname, sep);if pathseps > 0   startname = startname(pathseps(end)+1:end);end% create the dialog windowfd = FileDialog(Frame, db_title, FileDialog.SAVE);%set(fd,'Modal','off')  %% didn't do what I had hoped.  See "To Do," below% display the windowsfd.setFile(startname);fd.show% thought this might break fd's modal stranglehold.  Didn'tfigure(exten_wind)% get the selected path and filepathname = char(fd.getDirectory);filename = char(fd.getFile);filterindex = 1;if isempty(filename)	filename=0;	filterindex=0;end% workaround for a stupid OS X java bug.  FileDialog strips the file extension.% Don't know why it hasn't been fixed, but there you go.  (09/13/11)% This is tied to the Finder preference "Show all filename extensions".  If unchecked, the% dialog box will not show the extension; if it is checked, the filename is fully displayed.temp = findstr(startname,'.');if temp   orig_file_exten = startname(temp+1:end); else   orig_file_exten = '';endtemp = findstr(filename,'.');if temp   new_file_exten = filename(temp+1:end); else   new_file_exten = '';endif isempty(new_file_exten)	new_file_exten = orig_file_exten;	filename = [filename '.' new_file_exten];end% cleanliness is next to impossibleclose(exten_wind)fd.dispose%%%%%%%% To do:  I would really, really love to find ways to implement the following features:%% ¥ Add a pop-up menu to the FileDialog box and popluate it with the filterspec information%% Since this seems unlikely given my extremely limited facility with Java, I have adopted the% current approach of opening a secondary window with the filterspec information to at least% inform the user about what file extensions are appropriate to the situation.  If this is the% way it's gotta be, then I'd like to be able to do the following things to make it more useful:%% ¥ Force the FileDialog to NOT BE MODAL.  Setting it through MATLAB's object property doesn't%   do it.  All it does is allow the function to keep running, but fd stays resolutely in the%   foreground.  If this can be overcome, then the extensions window has the chance to become%   something more than just a reminder of what file types are allowed.%% ¥ Get meaningful size/position information from the FileDialog window so that I can%   place the extensions list window alongside of it.  Really not more than cosmetic, but%   still something I'd like to do.  So far, getting position info through fd.methods or%   its handle properties yields meaningless (to me) junk.%% All told, I have to say that this has been the fewest lines of code per hour (per day!% per week!) that I have ever generated for such a little project.  It's been a hard-fought% battle just to make it this far.