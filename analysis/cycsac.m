% cycsac.m:    plot the timing effects of the braking saccades% written by:  Jonathan Jacobs%              November 1995 - May 1996  (last mod: 05/30/96)% we will go through the control point lists, a column at% a time, extracting the real points from the NaNs. % The stripped column is then used to index into the proper% column of the position data array.  The points are concatenated% into vectors (love that transpose operator) and displayed.%clear sac_dist pre_sac_vel init_sac_vel post_sac_vel %clear vel_diff pcnt_diff cycle_dur%clear all_sacv_on_pts  all_sacp_on_pts %clear all_sacv_off_pts all_sacp_off_pts %clear all_cycle_beg_pts all_cycle_end_pts sac_dist=[];          pre_sac_vel=[];init_sac_vel=[];      post_sac_vel=[];vel_diff=[];          pcnt_diff=[];         cycle_dur=[];all_sacv_on_pts=[];   all_sacp_on_pts=[]; all_sacv_off_pts=[];  all_sacp_off_pts=[]; all_cycle_beg_pts=[]; all_cycle_end_pts=[]; if ~exist( 'sacp_on_mat')   disp( 'You need to run "pickdata" first.' )   returnend[nRows, nCols] = size( sacv_on_mat );for z = 1:nCols   % whack out the 'NaNs'   num_pts = length( find( sacv_on_mat(:,z) < 100000 ) );   num_pts_list(z) = num_pts;   % concatenate the lists of saccade control points   this_sacv_on     = sacv_on_mat( 1:num_pts,z );   all_sacv_on_pts  = [all_sacv_on_pts' this_sacv_on']';   this_sacp_on     = sacp_on_mat( 1:num_pts,z );   all_sacp_on_pts  = [all_sacp_on_pts; this_sacp_on];   this_sacv_off    = sacv_off_mat( 1:num_pts,z );   all_sacv_off_pts = [all_sacv_off_pts; this_sacv_off];   this_sacp_off    = sacp_off_mat( 1:num_pts,z );   all_sacp_off_pts = [all_sacp_off_pts; this_sacp_off];   this_cycle_beg   = cycle_beg_mat( 1:num_pts,z );   all_cycle_beg_pts = [all_cycle_beg_pts; this_cycle_beg];   this_cycle_end   = cycle_end_mat( 1:num_pts,z );   all_cycle_end_pts = [all_cycle_end_pts; this_cycle_end];   % calculate and concatenate the lists of saccade stuff.   % Use the 'sacp' points for determining positional   % differences of saccades, and 'sac' pts for vel/acc.   this_sac_dist      = abs(pos(this_sacp_off,z) - pos(this_sacp_on,z));   this_cycle_dur     = 1000*(this_cycle_end - this_cycle_beg)/samp_freq;   this_pre_sac_vel   = vel(this_sacv_on-1,z);  % vel just before the saccade   this_init_sac_vel  = vel(this_sacv_on,z);    % init vel of the saccade   this_final_sac_vel = vel(this_sacv_off,z);   % final vel of the saccade   this_post_sac_vel  = vel(this_sacv_off+1,z); % vel just after the saccade   sac_dist      = [ sac_dist'      this_sac_dist' ]';   cycle_dur     = [ cycle_dur'     this_cycle_dur' ]';   pre_sac_vel   = [ pre_sac_vel'   this_pre_sac_vel' ]';     init_sac_vel  = [ init_sac_vel'  this_init_sac_vel' ]';   final_sac_vel = [ final_sac_vel' this_final_sac_vel' ]';   post_sac_vel  = [ post_sac_vel'  this_post_sac_vel' ]';  end %for z% useful? statisticstotal_num = length(cycle_dur);disp( ['Total number of braking saccades: ' num2str(total_num)] );disp( ['Max cycle duration: ' num2str(max(cycle_dur)) ' deg'] );disp( ['Min cycle duration: ' num2str(min(cycle_dur)) ' deg'] );disp( ' ' )disp( ['Max braking amplitude: ' num2str(max(sac_dist)) ' ms'] );disp( ['Min braking amplitude: ' num2str(min(sac_dist)) ' ms'] );disp( ' ' )% now let's plot velocity differencesfigure('Name','Braking saccade magnitude vs pre-sac vel',...       'NumberTitle','off');orient landscapeplot(sac_dist, cycle_dur, '.');[slope,inter,r_sqr] = regress(sac_dist, cycle_dur,0);yfit = slope*sac_dist + inter;hold onplot(sac_dist, yfit, 'c')hold offrtitleStr = ['r^2 = ' num2str(r_sqr)];xlabel('Saccade Magnitude (deg)')ylabel('Cycle Duration (msec)')orient landscape[num, width] = size(what_files);fileStr   = [num2str(num) ' files loaded.'];nSacStr   = [num2str(total_num) ' saccades.'];if length(what_f_names) > 65   title( [fileStr '  ' nSacStr '  ' rtitleStr] ) else   title( [what_f_names '  ' nSacStr '  ' rtitleStr] )endif ~exist( 'export' ) export = 0; endif export   expdir   cycle_dur = cycle_dur';   save cycle_dur.txt cycle_dur /ascii   sac_dist = sac_dist';   save sac_dist.txt sac_dist /ascii   yfit = sac_dist';   save yfit.txt yfit /asciiendif ~exist('debugme') debugme = 0; endif ~debugme   clear nRows nCols num_pts z num width   clear this_sacv_on this_sacv_off this_sacp_on this_sacp_off   clear this_cycle_beg this_cycle_end   clear this_sac_dist this_pre_sac_vel    clear this_init_sac_vel this_post_sac_vel   clear all_sacv_on_pts  all_sacp_on_pts    clear all_sacv_off_pts all_sacp_off_pts    clear all_cycle_beg_pts all_cycle_end_pts    clear sac_dist init_sac_vel pre_sac_vel post_sac_vel vel_diff   clear fileStr nSacStr rtitleStr   clear slope inter r_sqr yfit   clear init_sac_vel pre_sac_vel post_sac_vel vel_diff   clear fileStr nSacStr rtitleStr   clear slope inter r_sqr yfitend