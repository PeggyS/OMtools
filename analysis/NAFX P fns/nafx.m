% NAFX.m: nystagmus foveation functions.%% **** NOTE: for best results, low-pass filter the position data ****% ****       at around 15-25 Hz before using these functions.    ****%%  1) Display of foveation functions:%            'showp', 'showv', 'showpv'  <-- Show the points that meet%                                             pos/vel criteria%   Usage:%   [posLimPts, velLimPts, fovLimPts] %            = nafx(pos, vel, samp_freq, [posLim,velLim], 'func', dblPlot)%%     Where: dblPlot = 0 will plot position and velocity on a single graph%            dblPlot = 1 will plot position and velocity on separate graphs%   Example:%         'nafx(pos,vel,splfreq,[poslim,vellim],'showpv',0/1);'%          [] uses default >>Displays the number of foveation periods<<%%    NOTES:%        For [posLim,velLim], to use the default limits of 0.5 degrees%          and 4.0 degrees/sec, you may simply pass an empty array ('[]').%        You must explicitly specify output arguments%          if you want access to their values.%%  2) Acuity functions:%            'nafx'%   Usage:%   [NAFXval, NAFXPval, FovTime/fov period, FovTime/sec, STDpos, STDvel] %      = nafx(pos, vel, samp_freq, #foveations, 'func', [tauIn posLim velLim]);%   Example:%         'nafx(pos,vel,sampfreq,#fovs,'nafx',[tauIn,posLim,velLim]);'%              [0,0,0] uses default >>Displays all NAF data<<%%    NOTES:%       Use of zero for any of [tauIn, posLim, velLim] will cause NAFX to %         use that argument's CALCULATED or DEFAULT value, while setting             %         any of [tauIn, posLim, velLim] > 0 will override any %         internally set/calculated tau, pos, vel limits. %       It is not necessary to call 'NAFX' with output arguments, since the %         program will display them as they are calculated.) %%  Allowed foveation window values:  (10/13/99)  [from avg tau-plane from ARVO 1998]%  xpos = [0.5 0.75 1.0 1.25 1.5 2.0 2.5 3.0 3.5 4.0 5.0 6.0];%  yvel = [4.0 5.0  6.0 7.0  8.0 9.0 10.0];% written by:  Jonathan Jacobs%              September 1997 - March 2007 (last mod: 03/23/07)%              ('NAF' code based on 'NFF.AST' by LFD and NVS)function [out1, out2, out3, out4, out5, out6] ...             = nafx(posArray, velArray, sampFreq, inp4, funct, inp6, use_tau_v2)global what_f_array NAFshowOutput numFovNAFXH tauNAFXH posArrayNAFXH nafx2snelH tauVersHif nargin < 5   nafx_gui   returnendcomp = computer;vers = version;if vers(1) >= '6'   degstr = '\circ';   pmstr  = '\pm'; else   if comp(1) == 'M'     degstr = '¡';     pmstr = '±';   else     degstr = ' deg';     dpmtr = '+/-';   endend % determine the background color for new figstempfig = figure('visible','off');bg_color = get(tempfig,'color');close(tempfig)if bg_color(1) == 0   le_color = 'y';   re_color = 'c';  else   le_color = 'g';   re_color = 'b';  end  evalin('base', 'global posArrayNAFXH velArrayNAFXH tauNAFXH qstr')evalin('base', 'global posLimNAFXH velLimNAFXH numFovNAFXH')evalin('base', 'global fovCritNAFXH dblPlotNAFXH nafx2snelH tauVersH')try   posArrayName = get(posArrayNAFXH,'string'); catch   posArrayName = '';endif ~exist('posArrayName'), posArrayName = ''; endchStr = '';pColorStr = 'y';     		%% default valueif ~isempty(posArrayName)    % which eye	if lower(posArrayName(1)) == 'r'		pColorStr = re_color;	 elseif lower(posArrayName(1)) == 'l'		pColorStr = le_color;	 else		pColorStr = 'm';	end   % concat eye and plane to get name of channel	chStr = [' (' posArrayName(1) posArrayName(2) ')'];end		if ~isempty(posArrayName)   dataseg = nameclean([' (' posArrayName ') ']); else   dataseg = '';endif ~isempty(nafx2snelH)   age_range = get(nafx2snelH,'Value');else   disp(' ')   disp('Enter the subject''s age:')   disp(' 1) under 6 years old')   disp(' 2) from 6 to 12 years old')   disp(' 3) from 12+ to 40 years old')   disp(' 4) from 40+ to 60 years old')   disp(' 5) greater than 60 years old')   disp(' 6) A dog of any age')   age_range=0;   while age_range<1 | age_range>6      age_range = input('--> ');   end   disp(' ')endmode = 'cmdl';funct = lower(funct);if findstr(funct, 'gui')   mode = 'gui';      funct = funct(1:end-3);endNAFshowOutput = 1;if nargout == 6   NAFshowOutput = 0;enddblPlot = 0;  %% default is '0': individual plotsuseTauIn = 0;if nargin >= 6   if strcmp(funct(1:3), 'sho')  % showp, showv showpv      dblPlot = inp6(1);    else      tauIn = inp6(1);      useTauIn = 1;   end else   inp6=0;endif nargin < 7  use_tau_v2 = 1;  %%% default value for Tau Plane v2endif use_tau_v2   NAFXvers = '2.0'; else   NAFXvers = '1.0';endif strcmp(mode,'gui')	if ~isempty(tauNAFXH)		tauIn = get(tauNAFXH,'string');       %% time in ms		if strcmp(tauIn,'empty')		   useTauIn = 0;		 else		   useTauIn = 1;		   tauIn = str2num(tauIn);		end	 else	   useTauIn = 1;	endend% can only work on one file at a time[r,c]=size(posArray);if min(r,c)>1   disp('NAFX requires exactly ONE channel of data.')   disp('Use PICKDATA to select your data')   returnend%% default settingsposLim = 0.5;velLim = 4.0;     %% with "lsh01_1.txt", all vels come in quanta of 2.03xxx                  %% so a lim of 4.0 cuts off the 4.06deg/sec values.  This                  %% may be fixed when I use a better tech for determining                   %% when foveation is occurring?% what were posLim and velLim?if length(inp6)>1   if isempty(inp6(2)) | inp6(2)==0       ;    else      posLim = inp6(2);   endendif length(inp6)>2   if isempty(inp6(3)) | inp6(3)==0       ;    else      velLim = inp6(3);   endend%% hardwired settings for expanded functions.  these overide any passed in.if strcmp(funct, 'nafx')   % ONLY nafx can use posLim,velLim args passed in.   %tauPV = 183.8885*(1-exp(-velLim*posLim/10));  %% 168.7940   %tauPV = 250*(1-exp(-velLim*posLim/10));      %% 229.4788   %tau = 150;   %% we will insert a table lookup here.  Values in the table   %% will come from an average tau-plane generated elsewhere   %% this is ugly, and I'd like to pretend it never happened   xpos = [0.5 0.75 1.0 1.25 1.5 2.0 2.5 3.0 3.5 4.0 5.0 6.0];   yvel = [4.0 5.00 6.0 7.00 8.0 9.0 10.0];   tauPV_1(1,:) = [33.30 32.00 31.30 31.07 30.33 29.77 29.73 29.88 30.03 30.22 30.45 30.59];   tauPV_1(2,:) = [42.30 41.00 41.13 40.53 39.74 39.09 39.31 39.55 39.75 39.99 40.30 40.48];   tauPV_1(3,:) = [51.42 50.53 50.36 50.58 49.17 48.12 48.14 47.93 48.52 48.85 49.23 49.44];   tauPV_1(4,:) = [53.63 55.60 56.83 56.97 56.14 55.07 54.61 54.94 55.61 55.99 56.43 56.68];   tauPV_1(5,:) = [57.07 59.36 60.68 60.88 60.01 58.88 58.44 58.80 59.53 59.95 60.44 60.72];   tauPV_1(6,:) = [59.75 63.93 67.11 66.83 67.59 66.66 66.30 66.80 67.62 68.09 68.66 68.97];   tauPV_1(7,:) = [63.03 66.59 73.72 77.30 78.63 77.71 78.35 79.00 79.92 80.44 81.10 81.45];   tauPV_2(1,:) = [33.30 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00];   tauPV_2(2,:) = [38.92 39.04 39.17 39.29 39.41 39.65 39.88 40.11 40.33 40.53 40.87 41.04];   tauPV_2(3,:) = [47.14 47.24 47.33 47.42 47.52 47.70 47.88 48.06 48.24 48.41 48.75 49.09];   tauPV_2(4,:) = [54.01 54.45 54.76 54.99 55.17 55.45 55.68 55.89 56.10 56.30 56.72 57.13];   tauPV_2(5,:) = [61.45 61.96 62.35 62.64 62.88 63.25 63.54 63.80 64.03 64.26 64.72 65.17];   tauPV_2(6,:) = [63.76 67.95 69.26 69.76 70.02 70.40 70.75 71.10 71.45 71.80 72.50 73.22];   tauPV_2(7,:) = [61.96 69.08 73.20 75.60 77.02 78.45 79.10 79.50 79.82 80.12 80.69 81.26];   if use_tau_v2      tauPV = tauPV_2;    else      tauPV = tauPV_1;   end      xindex = find(xpos==posLim);   yindex = find(yvel==velLim);   tau = tauPV(yindex,xindex);   %% this is NOT a mistake.  This IS the proper order. elseif strcmp(funct(1:3), 'sho')  % showp, showv showpv   % if we don't specity lims in 'inp4', use defaults    if ~isempty(inp4)      posLim = inp4(1); velLim = inp4(2);   end else   disp('unknown function')   returnendif useTauIn   %disp('using tauIn')   if tauIn > 0      tau = tauIn;   endend%%% from here onward, all our case-specific variables have been settotalDur  = length(posArray)/sampFreq;        % in millisecondsposLimPts = find( abs(posArray) <= posLim );  % all points in foveal extentvelLimPts = find( abs(velArray) <= velLim );  % all points that are < slip vel%% intersection of these criteria gives all points%% that fall within the foveation window.posVelPts = find( (abs(velArray) <= velLim) & (abs(posArray) <= posLim) );if strcmp(funct,'showpv') | strcmp(funct,'showvp')   fovlist = posVelPts; elseif strcmp(funct,'showp')   fovlist = posLimPts; elseif strcmp(funct,'showv')   fovlist = velLimPts; else   fovlist = posVelPts; %% NAFX calc MUST satisfy P & V!!!!!endif NAFshowOutput, suppress=0; else suppress=1;end% this is VERY different from 'nff' because here we are using 'detectfovs'% to determine the list of fovWinPts that will be used to calculate the nafx.% In 'nff' the list was simply the points that satisfied pos and vel criteria% simultaneously, without the additional processing that 'detectfovs' adds% (i.e. joining segments and deleting isolated points.)if isempty(fovlist)   disp('No foveation points detected.  You may need to shift the position array.')   return  else   [numfov,fovWinPts,DFvers]=detectfovs(fovlist,posArray,suppress, funct);endt = maket(posArray);if strcmp(mode,'gui') & strfind(funct,'show')   set(tauNAFXH,'string','empty');   set(numFovNAFXH,'string', num2str(numfov));endif size(fovWinPts) <= 1   disp( 'Need more foveation points for analysis to be valid.')   returnendFWposArray = stripnan(posArray(fovWinPts));FWvelArray = stripnan(velArray(fovWinPts));fovSize   = length(fovWinPts);            %%% number of good pointsfovDur    = 1000*fovSize/sampFreq;        %%% in millisecondsfovPerSec = fovDur/totalDur;              %%% avg ms of fov per secondif ~strcmp(funct(1:3), 'sho')   if isempty(inp4)      disp('Enter or calculate the number of foveations.')      return   end      fovPerCyc = fovDur/inp4;               %%% avg ms of fov per cycleend                                       %%% inp4 = # of foveations%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%                Foveation display section                               %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% if all we want to do is see what points satisfy our% pos/vel limits then plot them and returnif strcmp(funct(1:3), 'sho')  % showp, showv showpv   % initialize the over-plotting arrays   pLimArray = NaN*ones(length(posArray),1);   vLimArray = NaN*ones(length(velArray),1);   if strcmp(funct,'showpv') | strcmp(funct,'showvp')      % then fill them with only the appropriate pts      pLimArray(posVelPts) = posArray(posVelPts);      vLimArray(posVelPts) = velArray(posVelPts);      t1 = ([upper(nameclean(what_f_array)) dataseg ': Vel. points within '...            pmstr num2str(posLim) degstr ' by ' num2str(velLim) degstr '/sec window']);      t2 = ([upper(nameclean(what_f_array)) dataseg ': Pos. points within '...            pmstr num2str(posLim) degstr ' by ' num2str(velLim) degstr '/sec window']);	  t3 = ([upper(nameclean(what_f_array)) dataseg ':  ' num2str(numfov) ' '...	         ' Foveations identified by algorithm within '...	         pmstr num2str(posLim) degstr ' by ' num2str(velLim)  degstr '/sec window']);     elseif strcmp(funct,'showp')      pLimArray(posLimPts) = posArray(posLimPts);      vLimArray(posLimPts) = velArray(posLimPts);      t1 = ([ upper(nameclean(what_f_array)) dataseg ': Vel. points within '...             'position limit of ' pmstr num2str(posLim) degstr]);      t2 = ([ upper(nameclean(what_f_array)) dataseg ': Pos. points within '...             'position limit of ' pmstr num2str(posLim) degstr]);	  t3 = ([upper(nameclean(what_f_array)) dataseg ':  ' num2str(numfov) ' '...	          ' Foveations identified by algorithm within '...	          'the ' pmstr num2str(posLim) degstr ' limit']);     elseif strcmp(funct,'showv')      pLimArray(velLimPts) = posArray(velLimPts);      vLimArray(velLimPts) = velArray(velLimPts);      t1 = ([upper(nameclean(what_f_array)) dataseg ...             ': Vel. points within velocity limit of ' pmstr num2str(velLim) degstr ]);      t2 = ([upper(nameclean(what_f_array)) dataseg ...             ': Pos. points within velocity limit of ' pmstr num2str(velLim) degstr ]);	  t3 = ([upper(nameclean(what_f_array)) dataseg ':  ' num2str(numfov) ' '...	          ' Foveations identified by algorithm within '...	          'the ' pmstr num2str(velLim) degstr '/sec limit']);   end   % 1st figure: show the raw points that satisfy both pos and vel limits   % plotted on top of the separate pos and velocity traces.   if NAFshowOutput      if dblPlot, pv=figure;         subplot(2,1,1); box on       else v=figure;      end      hold on      p1 = plot(t,velArray, pColorStr); box on      p2 = plot(t,vLimArray,'m'); box on      set(p2,'LineWidth',2);      set(p2,'LineStyle','-');      set(p2,'Marker','*');      set(p2,'MarkerSize',2);      set(p2,'MarkerEdgeColor','r');      title(t1)      drawrad(0,velLim);        if dblPlot,         subplot(2,1,2); box on       else         p=figure;      end      hold on      p1 = plot(t,posArray, pColorStr); box on      p2 = plot(t,pLimArray,'m'); box on      set(p2,'LineWidth',2);      set(p2,'LineStyle','-');      set(p2,'Marker','*');      set(p2,'MarkerSize',2);      set(p2,'MarkerEdgeColor','r');      title(t2)      drawrad(0,posLim);      if dblPlot         figure(pv);         subplot(2,1,1);ylabel(['Eye Velocity (' degstr '/sec)']);         subplot(2,1,2);xlabel('Time (sec)');         ylabel(['Eye Position (' degstr ')']);       else         figure(v);xlabel('Time (sec)');         ylabel(['Eye Velocity (' degstr '/sec)']);         figure(p);xlabel('Time (sec)');         ylabel(['Eye Position (' degstr ')']);      end      disp(['Total time: ' num2str(length(posArray)/sampFreq) ' sec. (' ...                           num2str(length(posArray)) ' samples)' ])      disp(['Total time that meets position criterion = '...            num2str(1000/sampFreq*length(posLimPts)) ' msec.' ...            '    (' num2str(length(posLimPts)) ' samples) '] )      disp(['Total time that meets velocity criterion = '...            num2str(1000/sampFreq*length(velLimPts)) ' msec.' ...            '    (' num2str(length(velLimPts)) ' samples) '] )      disp(['Total time that meets both criteria      = '...             num2str(1000/sampFreq*length(fovlist)) ' msec.' ...            '    (' num2str(length(fovlist)) ' samples) [raw] '] )      disp(['Total time that meets both criteria      = '...             num2str(1000/sampFreq*length(fovWinPts)) ' msec.' ...            '    (' num2str(length(fovWinPts)) ' samples) '] )	   disp(['There were (probably) ' num2str(numfov)...	         ' foveation periods in this interval.'])		disp('Cycles by manual count: ')                     disp(' ')         end %if NAFshowOutput      % second figure   % guess how many foveation periods and overplot them on the pos/vel data	pLimArray = NaN*ones(length(posArray),1);  	pLimArray(fovWinPts) = posArray(fovWinPts);	%vLimArray = NaN*ones(length(velArray),1);  	%vLimArray(fovWinPts) = velArray(fovWinPts);	if NAFshowOutput	   fovWinfig=figure;   	   hold on	   p1 = plot(t,posArray, pColorStr); box on	   p2 = plot(t,pLimArray,'m'); box on	   set(p2,'LineWidth',2);	   set(p2,'LineStyle','-');	   set(p2,'Marker','*');	   set(p2,'MarkerSize',2);	   set(p2,'MarkerEdgeColor','r');	   drawrad(0,posLim);	   ept	   title(t3)	end %if NAFshowOutput    % set our output variables   out1 = posLimPts;   out2 = velLimPts;   out3 = posVelPts;       out4 = numfov;   out5 = fovWinPts;   returnend%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%                     NAFX calculation section                           %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% start calculations for common NAF/NFX functionsSTDpos = std(FWposArray);STDvel = std(FWvelArray);%% for NAFnormfac = 0.5/posLim;            %% normalized to standardposfac  = (posLim/velLim);       %% limits%posfac  = (posLim/velLim)^2;VARpos = STDpos^2;VARvel = STDvel^2;pooledVar = 0.5*( (STDpos)^2 + (STDvel*(posLim/velLim))^2 );pooledSTD = sqrt(pooledVar);% check to see if enough foveation for realistic resultsif fovPerSec <= 2000/sampFreq	disp('Insufficient foveation time for reasonable analysis.')	yn=lower(input('Be unreasonable and override anyway (y/n)? ','s')); 	if yn~='y'	   fovFlag = 0;	   return	endendNAFXval  = (1-(pooledSTD*normfac)) * (1 - exp(-fovPerCyc/tau));NAFPval =   (1-(STDpos*normfac))  * (1 - exp(-fovPerCyc/tau));if strcmp(mode,'gui')   set(tauNAFXH,'string',num2str(tau));endage_range_str={'under 6 years old'; '6 to 12 years old'; '12+ to 40 years old'; ...               '40+ to 60 years old'; '60+ years old'; 'canine (any age)'};if (NAFshowOutput)      %% add a condition for suppression of printout.   disp(['results: (using NAFX vers. ' NAFXvers ', DetectFovs vers. ' DFvers ')'])   if strcmp(lower(funct(1:3)),'naf')      snel = va2nafx(2,NAFXval,age_range,1);      if isnan(snel), snel = '20/1,250,000';end      disp(['                     NAFX = ' num2str(NAFXval,3) '  (<= ' snel ')  --  ' ...                                           age_range_str{age_range}])     %disp(['NAF(X) (for position only) = ' num2str(NAFPval)])      disp(['Fov. time per fov. period = ' num2str(fovPerCyc,3) ' msec'])      disp(['     Fov. time per second = ' num2str(fovPerSec/1000,3) ' sec'])      disp(['            STD(pos, vel) = (' num2str(STDpos,3) ' deg, ' ...                                            num2str(STDvel,3) ' deg/sec)'])      disp(['    Fov. window (pos, vel): (' num2str(posLim) ' deg, ' ...                                            num2str(velLim) ' deg/sec)'])      disp(['                       tau: ' num2str(tau,3) ' msec'])      disp([' '])   endend% set our output variablesassignin('base','NAFXval', NAFXval)out1 = NAFXval;out2 = NAFPval;out3 = fovPerCyc;out4 = fovPerSec;out5 = STDpos;out6 = STDvel;return%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% nameclean.m: allow underscores and carets to print as is, rather than% interpreting them as sub- and superscripts.% usage: out = nameclean(in)% Written by:  Jonathan Jacobs%              July 2002  (last mod: 07/25/02)function out = nameclean(in)if ~isempty(in)	out = strrep(in,'_','\_');	out = strrep(out,'^','\^');	out = strrep(out,'''',''); else    out = '';end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% nafx_gui.m:   % Written by:  Jonathan Jacobs%              December 2001 - March 2007  (last mod: 03/23/07)function nafx_gui()global samp_freq qstrglobal posArrayNAFXH velArrayNAFXH posLimNAFXH velLimNAFXH tauNAFXHglobal numFovNAFXH fovCritNAFXH dblPlotNAFXH fovStatNAFXH nafx2snelH tauVersHnafxFig = findme('NAFXwindow');if nafxFig > 0   figure(nafxFig)   returnendevalin('base', 'global posArrayNAFXH velArrayNAFXH tauNAFXH qstr')evalin('base', 'global posLimNAFXH velLimNAFXH numFovNAFXH')evalin('base', 'global fovCritNAFXH dblPlotNAFXH fovStatNAFXH nafx2snelH tauVersH')if isempty(samp_freq), samp_freq = 500; end   tau = 'empty';qstr = '''';scrsize = get(0,'Screensize');mBarHgt = 35;maxHgt = scrsize(4)-mBarHgt;maxWid = scrsize(3);fig_width = 250;fig_height = 370;% default valuesposArray = '';velArray = '';posLim = '0.5';velLim = '4';fovstat = 0;dblplot = 1;age_range = 3;tau_vers2 = 1;% make sure that 'omprefs' folder exists.  switch to it.gp_err = 0;oldpath = pwd;cd(matlabroot)eval('cd(''omprefs'')','gp_err=1;')if gp_err % must make a omprefs directory   mkdir('omprefs')   cd('omprefs')end% Set the window position.  Check if the window is already open.% If not, then we will first try to read its last saved position from% the pref file.  If not, we will place it at its default position.% Make sure that it will be drawn completely on the screen.% If not, move it so that it will.dErrFlag=0; fErrFlag=0;if ~exist('nafxXPos'), nafxXPos = []; endif ~exist('nafxYPos'), nafxYPos = []; endif isempty(nafxXPos)   if ~dErrFlag      eval(['load nafxprefs.mat'],'fErrFlag=1;');      % make sure that the window will be on the screen!      if nafxXPos<1,nafxXPos=1;end      if nafxYPos<1,nafxYPos=1;end      if (nafxYPos+fig_height)>maxHgt         nafxYPos=maxHgt-fig_height;      end      if (nafxXPos+fig_width)>maxWid         nafxXPos=maxWid-fig_width;      end      end           cd(oldpath) endif dErrFlag | fErrFlag   nafxXPos = 20;   nafxYPos = (maxHgt - fig_height)/2;end%% this is the first step towards eliminating the use of globals.nafxHandList = {qstr posArrayNAFXH velArrayNAFXH posLimNAFXH velLimNAFXH ...          tauNAFXH numFovNAFXH fovCritNAFXH dblPlotNAFXH fovStatNAFXH tauVersH};                                nafxFig = findme('NAFXwindow');if nafxFig < 0   linelist = {0};   nafxFig = figure('pos',[nafxXPos, nafxYPos, fig_width, fig_height],...     'Resize', 'off','Name',['NAFX v2.0b (Mar 2007)'],...     'NumberTitle', 'off','MenuBar', 'none','Color','k',...     'Tag','NAFXwindow',...     'UserData', {nafxHandList,linelist} ); else   figure(nafxFig)endx_orig=8;y_pos=fig_height-30;uicontrol('Style', 'text', 'Units', 'pixels',...          'Position',[x_orig y_pos+4 150 20],...          'HorizontalAlignment','Left',...          'String', ['Calculate using ''zoomtool'':']);nafxprepH = uicontrol('Style','Push','Units','Pixels',...			'Position', [x_orig+155 y_pos+4 65 20],...		    'String','nafxprep', 'Callback',['nafxprep']);y_pos=y_pos-20;uicontrol('Style', 'text', 'Units', 'pixels',...          'Position',[x_orig y_pos 95 20],...          'HorizontalAlignment','Left',...          'String', ['Subject age:']);nafx2snelH = uicontrol('Style','popup','Units','pixels',... 			'Position',[x_orig+100 y_pos 135 20],...			'String',['Under 6 y.o.|6-12 y.o.|12+ to 40 y.o.|' ...			           '40+ to 60 y.o.|>60 y.o.|Dog (any age)'], ...			'HorizontalAlignment', 'center',...			'Value', age_range);y_pos=y_pos-34;% set up the labelsuicontrol('Style','Frame','Pos',[3 fig_height-270 245 217],...          'BackgroundColor',[0.5 0.5 0.5]);uicontrol('Style', 'text', 'Units', 'pixels',...          'Position',[x_orig y_pos 95 25],...          'HorizontalAlignment','Left',...          'String', ['Position Array:']);posArrayNAFXH = uicontrol('Style','edit','Units','pixels',... 'BackgroundColor','magenta','ForeGroundColor','white',... 'Position',[x_orig+100 y_pos 135 25], 'String',posArray);y_pos=y_pos-30;uicontrol('Style', 'text', 'Units', 'pixels',...          'Position',[x_orig y_pos 95 25],...          'HorizontalAlignment','Left',...          'String', ['Velocity Array:']);velArrayNAFXH = uicontrol('Style','edit','Units','pixels',... 'BackgroundColor','magenta','ForeGroundColor','white',... 'Position',[x_orig+100 y_pos 135 25], 'String',velArray);y_pos=y_pos-30;uicontrol('Style', 'text', 'Units', 'pixels',...          'Position',[x_orig y_pos 95 25],...          'HorizontalAlignment','Left',...          'String', ['Position Limit:']);posLimNAFXH = uicontrol('Style','edit','Units','pixels',... 'BackgroundColor','magenta','ForeGroundColor','white',... 'Position',[x_orig+100 y_pos 135 25], 'String',posLim,... 'Callback',...   ['temp = abs(str2num(get(gco,''string'')));',...	'set(tauNAFXH,''String'',''empty'');',...    'if temp>6,',...    '   set(gco,''string'',''6'');',...    ' else,',...    '   set(gco,''string'',temp);',...        'end;']);%% 09/18/07: added code to set "tau" field to "empty" whenever value is changed %%y_pos=y_pos-30;uicontrol('Style', 'text', 'Units', 'pixels',...          'Position',[x_orig y_pos 95 25],...          'HorizontalAlignment','Left',...          'String', ['Velocity Limit:']);velLimNAFXH = uicontrol('Style','edit','Units','pixels',... 'BackgroundColor','magenta','ForeGroundColor','white',... 'Position',[x_orig+100 y_pos 135 25], 'String',velLim,... 'Callback',...   ['temp = abs(str2num(get(gco,''string'')));',...	'set(tauNAFXH,''String'',''empty'');',...    'if temp>12,',...    '   set(gco,''string'',''12'');',...    ' else,',...    '   set(gco,''string'',temp);',...        'end;']);%% 09/18/07: added code to set "tau" field to "empty" whenever value is changed %%y_pos=y_pos-30;uicontrol('Style', 'text', 'Units', 'pixels',...          'Position',[x_orig y_pos 95 25],...          'HorizontalAlignment','Left',...          'String', ['Sampling Freq.:']);sampFreqH = uicontrol('Style','edit','Units','pixels',... 'BackgroundColor','magenta','ForeGroundColor','white',... 'Position',[x_orig+100 y_pos 135 25],... 'String', num2str(samp_freq) );y_pos=y_pos-30;uicontrol('Style', 'text', 'Units', 'pixels',...          'Position',[x_orig y_pos 95 25],...          'HorizontalAlignment','Left',...          'String', ['Foveation Criteria:']);fovCritNAFXH = uicontrol('Style','popup','Units','pixels',... 'Position',[x_orig+100 y_pos-2 135 25],... 'String','Position & Velocity|Position Only|Velocity Only',... 'Value',1, 'UserData',['showpv';'showp ';'showv '] );y_pos=y_pos-30;uicontrol('Style', 'text', 'Units', 'pixels',...          'Position',[x_orig y_pos 95 25],...          'HorizontalAlignment','Left',...          'String', ['Tau:']);tauNAFXH = uicontrol('Style','edit','Units','pixels',... 'BackgroundColor','magenta','ForeGroundColor','white',... 'Position',[x_orig+100 y_pos 135 25],... 'String',num2str(tau) );y_pos=y_pos-38;uicontrol('Style','Frame','Pos',[3 y_pos-3 245 31],...          'BackgroundColor',[0.5 0.5 0.5]);uicontrol('Style', 'text', 'Units', 'pixels',...          'Position',[x_orig y_pos 80 23],...          'HorizontalAlignment','Left',...          'String', '# of Foveations:' );numFovNAFXH = uicontrol('Style','edit','Units','Pixels',... 'BackgroundColor','magenta','ForeGroundColor','white',... 'Position', [90 y_pos 65 25],... 'String','empty');fovCalcH = uicontrol('Style','Push','Units','Pixels',... 'Position', [160 y_pos 75 25],... 'String','Calculate',... 'Callback',...   ['funcNAFX  = get(fovCritNAFXH,''UserData'');',...    'valNAFX   = get(fovCritNAFXH,''value'');',...    'funcNAFX  = [deblank(funcNAFX(valNAFX,:)) ''gui''];',...    'posArray  = get(posArrayNAFXH,''string'');',...    'velArray  = get(velArrayNAFXH,''string'');',...    'posLim    = str2num(get(posLimNAFXH,''string''));',...    'velLim    = str2num(get(velLimNAFXH,''string''));',...    'tau       = str2num(get(   tauNAFXH,''string''));',...    'dblplot   = get(dblPlotNAFXH,''value'');',...    'fovstat   = get(fovStatNAFXH,''value'');',...    'tau_vers2 = get(tauVersH,''value'');',...    'age_range = get(nafx2snelH,''value'');',...    'dstr=[''nafx('' posArray '','' velArray '','' num2str(samp_freq) ];',...    'dstr=[dstr '',['' num2str(posLim) '','' num2str(velLim) ''],'' ];',...    'dstr=[dstr qstr funcNAFX(1:end-3) qstr '','' num2str(dblplot) '');''];',...    'disp('' ''),',...    'disp(dstr),',...    'nafx(eval(posArray),eval(velArray),samp_freq,[posLim,velLim], ' ...                   'funcNAFX,dblplot,tau_vers2);',...   ]);y_pos=y_pos-2;y_pos=y_pos-30;dblPlotNAFXH = uicontrol('Style','checkbox','Units','pixels',...   'Position',[x_orig y_pos 120 25],...   'Value', dblplot, 'String','Plot P&V together?');fovStatNAFXH = uicontrol('Style','checkbox','Units','pixels',...   'Position',[130 y_pos 110 25],...   'Value', fovstat, 'String','Foveation Stats?' );y_pos=y_pos-30;nafxCalcH = uicontrol('Style','Push','Units','Pixels',... 'Position', [x_orig y_pos 85 25],... 'String','Calc NAFX',... 'Callback',...   ['funcNAFX = ''nafxgui'';',...    'posArray = get(posArrayNAFXH,''string'');',...    'velArray = get(velArrayNAFXH,''string'');',...    'posLim   = str2num(get(posLimNAFXH,''string''));',...    'if posLim>6, posLim=6;set(posLimNAFXH,''string'',''6''); end;',...    'velLim   = str2num(get(velLimNAFXH,''string''));',...    'if velLim>10, velLim=6;set(velLimNAFXH,''string'',''10''); end;',...    'numfov   = str2num(get(numFovNAFXH,''string''));',...    'fovstat  = get(fovStatNAFXH,''value'');',...    'tau_vers2 = get(tauVersH,''value'');',...    'age_range = get(nafx2snelH,''value'');',...    'set(fovStatNAFXH,''value'',0);',...    'dstr=[''nafx('' posArray '','' velArray '','' num2str(samp_freq) '',''];',...    'dstr=[dstr num2str(numfov) '','' qstr funcNAFX(1:end-3) qstr '',[0,'' ];',...    'dstr=[dstr num2str(posLim) '','' num2str(velLim) '']);''];',...    'disp(dstr),',...    'nafx(eval(posArray),eval(velArray),samp_freq,numfov, ' ...                     'funcNAFX,[0,posLim,velLim],tau_vers2);',...    'set(fovStatNAFXH,''value'',fovstat);',...   ]);tauVersH = uicontrol('Style','checkbox','Units','Pixels',... 'Position', [100 y_pos 65 20],'String','Tau v2', ... 'Value',tau_vers2, 'Callback',['set(tauNAFXH,''String'',''empty'');'] ...   );doneH = uicontrol('Style','Push','Units','Pixels',... 'Position', [175 y_pos 65 25],... 'String','Done',... 'Callback',...   ['nafxtemp=get(gcf,''position'');',...    'nafxXPos = nafxtemp(1);',...    'nafxYPos = nafxtemp(2);',...    'posArray = get(posArrayNAFXH,''string'');',...    'velArray = get(velArrayNAFXH,''string'');',...    'posLim   = str2num(get(posLimNAFXH,''string''));',...    'velLim   = str2num(get(velLimNAFXH,''string''));',...    'numfov   = str2num(get(numFovNAFXH,''string''));',...    'fovstat  = get(fovStatNAFXH,''value'');',...    'tau_vers2 = get(tauVersH,''value'');',...    'age_range = get(nafx2snelH,''value'');',...    'dblplot   = get(dblPlotNAFXH,''value'');',...	'close(gcf);',...    'oldpath=pwd;',...    'cd(matlabroot); cd(''omprefs'');',...    'if exist(''posArray'',''var'') & exist(''velArray'',''var''),',...    'save nafxprefs.mat nafxXPos nafxYPos posArray velArray posLim velLim ' ...                       'dblplot age_range fovstat tau_vers2;',...     'end,',...    'cd(oldpath),',...     'clear global posArrayNAFXH velArrayNAFXH posLimNAFXH velLimNAFXH,',...    'clear global fovCritNAFXH numFovNAFXH dblPlotNAFXH qstr tau_vers2,',...    'clear global fovStatNAFXH tauNAFXH nafx2snelH tauVersH NAFshowOutput,',...    'clear funcNAFX modeNAFX valNAFX nafxXPos nafxYPos dstr qstr tau,',...    'clear age_range numfov oldpath tau_vers2,',...    'clear dblplot fovstat nafxtemp posArray velArray posLim velLim curdir',...   ]);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% detectfovs.m: find foveation periods given a list of points that meet the % foveation criteria.% Usage:   [numfov, fovlist] = detectfovs(in, posIn, suppress)% Where:  'in' is the raw foveation points list%         'posIn' is the position array% Written by:  Jonathan Jacobs%              March 1998 - January 2002 (last mod: 01/14/02)function [numfov,fovlist,DFvers] = detectfovs(in,posIn,suppress, funct)global samp_freq what_f_array NAFshowOutput fovStatNAFXHDFvers = '1.0';if nargin == 1   suppress = 0;endcomp = computer;vers = version;if vers(1) >= '6'   degstr = '\circ';   pmstr  = '\pm'; else   if comp(1) == 'M'     degstr = '¡';     pmstr = '±';   else     degstr = ' deg';     dpmtr = '+/-';   endend [r,c]=size(in);sacVelVal = 50;       % lower vel. limit for saccade blankingsacAccVal = 2000;     % lower accel. limit for saccade blankingsacJerkVal = 100000;  % lower jerk limit for saccade blankinggapDur = 35;          % a gap is greater than this value (in msec)% temp fix 10/14/99if samp_freq > 300   minFovDur = 7;        % min duration considered to be a fov segment(in msec) else   minFovDur = 10;        % min duration considered to be a fov segment(in msec)end% we use jerk (4th derivative) to determine is a saccade is occurring.velIn  = d2pt(posIn,3,samp_freq);accIn  = d2pt(velIn,3,samp_freq);jerkIn = d2pt(accIn,3,samp_freq);gapSamp    = ceil(samp_freq/1000 * gapDur) + 1;	    % 'fencepost' problemminFovSamp = ceil(samp_freq/1000 * minFovDur) + 1;	% 'fencepost' problem% gapSamp    = round(samp_freq/1000 * gapDur);      % use 'ceil'?% minFovSamp = round(samp_freq/1000 * minFovDur);   %  "   "% initially hit pts are the raw results from nff (meet pos/vel crit)% using this raw info we will create two arrays:%  -- a "hits" array:   "1" = fov win pt%  -- a "misses" array: "1" = non-fov win ptlastpt = in(length(in));aa = zeros(lastpt,1);bb = ones(lastpt,1);aa(in) = bb(in);hits = aa;% Our approach is pretty simple:% first we FILL in any gaps shorter than the gap duration that appear % between "good" points (points that meet the pos/vel criteria)...% gapArray will contain the starting points of all the gaps% longer than gapSamp samples ( = gapDur msec)a = [in' in(length(in))]';b = [0 in']';diffArray = a-b;gapArray = find( (diffArray<gapSamp) & (diffArray>1) );if isempty(gapArray)   % no little guys to FILL   if ~suppress      disp([' >> There were NO gaps shorter than ' num2str(gapDur) ' msec'])      end else   gapArray = gapArray - 1;   % to mark the BEGINNING of the gap, not the end   if gapArray(1) == 0      gapArray = gapArray(2:length(gapArray)); % strip the leading zero   end      % walk along diffIndex, filling in the gaps   for i = 1:length(gapArray)      % if we have a short enough gap we will fill in the "missing" pts,      % remembering that we can't fill in times during a saccade.      % (and a saccade can't be less than 3 samples +2 for beg&end)      startPt(i) = in(gapArray(i));      endPt(i)   = in(gapArray(i)+1);      lenFill(i) = (endPt(i)-startPt(i))+1;      %isSac=0;      %isSac      = any(accIn(startPt(i):endPt(i))>=sacAccVal);      isSac      = any(abs(jerkIn(startPt(i):endPt(i)))>=sacJerkVal);      if ~isSac | lenFill(i) <= 5         hits(startPt(i):endPt(i))=( ones(lenFill(i),1) );      end   endend% ... and next we KILL all "good" segments that are too short...% segArray will contain the starting points of all the segments% shorter than minFovSamp samples ( = minFovDur msec)misses = find(hits==0);if isempty(misses)   misses=1;endaa2 = zeros(lastpt,1);bb2 = ones(lastpt,1);aa2(misses) = bb(misses);a = [misses' misses(length(misses))]';b = [0 misses']';diffArray2 = a-b;segArray = find( (diffArray2>1) & (diffArray2<=minFovSamp) );if isempty(segArray)   % no little guys to KILL   if ~suppress       disp([' >> There were NO segments shorter than '...                   num2str(minFovDur) ' msec'])   end else      segArray = segArray - 1;          % to mark the BEGINNING of the segment   if segArray(1) == 0      segArray = segArray(2:length(segArray)); % strip the leading zero   end      % walk along diffIndex2, killing the short segments   for i = 1:length(segArray)      % if we have a too-short segment we will kill those pts      startPt2(i) = misses(segArray(i));      endPt2(i)   = misses(segArray(i)+1);      lenKill(i)  = (endPt2(i)-startPt2(i))+1;      hits(startPt2(i):endPt2(i))=zeros(lenKill(i),1);   endend% ... and finally, we count the number of event clusters that are left.% These are (hopefully) our foveation periods.hits(1)=0; hits(2)=0;hits(length(hits))=0;i=2;count=0;for i=2:length(hits)   if hits(i)~=hits(i-1)      if hits(i)==1             % a beginning         count=count+1;         fpStart(count) = i;        else                    % an ending         fpStop(count)  = i-1;      end   endendnumfov=count;fovlist = find(hits==1);yn=' ';if strcmp(funct(1), 's')   if ~isempty(fovStatNAFXH)      yn=get(fovStatNAFXH,'value');    else      yn=lower(input('% Display foveation statistics (y/n)? ','s'));   endendif NAFshowOutput & (yn == 1 | yn == 'y')	figure	subplot(2,1,1)	fpLen = fpStop-fpStart;	fpDur = fpLen/samp_freq(1)*1000; % foveation periods in sec	%make bins that are ''binwid'' ms wide.	binwid=5;	lowend = 5*fix(min(fpDur)/binwid);	hiend  = 5*fix(max(fpDur)/binwid);	binlist = lowend:binwid:hiend;    if length(binlist)>1  	   hist(fpDur,binlist)     else       hist(fpDur)    end	ylabel('Number of foveations')	xlabel('Foveation Duration (msec)')	title(['File: ' nameclean(what_f_array) '  Distribution of Foveation Durations'])	subplot(2,1,2)	for i=1:length(fpLen)	   fpAvg(i) = mean(posIn(fpStart(i):fpStop(i)));	end	%make bins that are ''binwid'' deg wide. 	range=ceil(max(fpAvg)-min(fpAvg))+1;	binwid=0.05*range;	lowend = binwid*fix(min(fpAvg)/binwid);	hiend  = binwid*fix(max(fpAvg)/binwid);	binlist = lowend:binwid:hiend;	if length(binlist)>1       hist(fpAvg,binlist)     else       hist(fpAvg)      end    ylabel('Number of foveations')	xlabel(['Average Foveation Position (' degstr ')'])	title(['File: ' nameclean(what_f_array) '  Distribution of Average Foveation Positions'])	disp(' ')	for i=1:length(fpLen)	   disp(['    Foveation #' num2str(i)...	         ': duration ' num2str(fpDur(i)) ' msec,'...	         '   Avg pos ' num2str(fpAvg(i)) ' deg'])	end	disp(' ')end % (if NAFshowOutput)%keyboardreturn%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%