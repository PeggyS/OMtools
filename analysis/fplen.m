% fplen.m: calculate the length of foveation periods.  The foveation period is % defined as the interval following a foveating saccade (or a braking saccade) % where the eye's velocity is within +/- 4 deg/sec.% written by:  Jonathan Jacobs%              July 1996 - August 1996 (last mod: 08/07/96)if ~exist( 'sacv_off_mat') | ~exist('vel')   disp( 'You need to run "pickdata" first.' )   returnend[nRows, nCols] = size( sacv_off_mat );fileStr   = [num2str(nCols) ' files loaded.'];samp_time = 1000/samp_freq;       % time between samplesFPlowerLim = fix(10/samp_time);   % # samples in 10 ms  [guess (8/2/96)]FPupperLim = fix(200/samp_time);  % # samples in 200 ms [guess (8/5/96)]gapLim = fix(10/samp_time);       % # samples in 10 msgapMaxCutoff = fix(50/samp_time); % # samples in 50 ms: a gap of >50ms marks                                  % the end of the foveation periodFPmat = []; FPdur = []; FPavg = [];limDiff = []; gaps = []; badPtList = [];dat_len = []; saclist = []; num_pts = [];epsV1 = 0.000;   % 'squelch-like' noise control for FP startepsV2 = 0.000;   % 'squelch-like' noise control for FP endepsP2 = 0.000;   % 'squelch-like' noise control for position checkslipLim = 4.0;   % slip velocity limitfovLim = 0.5;    % foveal extent% since the period following braking saccades tends to fall outside of the% foveal limits, we'd like to turn this check off when necessary.if ~exist('whichWFST')   BorF = upper(input( ['Enforce foveal limits ("N" is a good answer when'...                        ' looking at braking saccades (Y/N))? '], 's')); else   BorF = findstr(whichWFST, 'BRAK');endif isempty(BorF) | (BorF == 'Y')   isBS = 0; else   isBS = 1;  % disable the position check routineendfiltvel = mvgavg(vel, 7);if nCols > 2   verbose = 0;  % 0 = don't draw plots to show the fov periods else   verbose = 1;  % 1 = draw plots to show the fov periodsendentry = 1;for z = 1:nCols    % do each file selected by PICKDATA   % whack out the 'NaNs'   num_pts(z) = length( find( sacv_off_mat(:,z) < 100000 ) );   disp([what_f_array(z,:) num2str(num_pts(z)) ' saccades '])   dat_len(z) = length( find( filtvel(:,z) < 100000 ) );   saclist    = sacv_off_mat( 1:num_pts(z),z );   % go through this list of saccades one at a time.  First we search for   % the sample where |velocity| < slip vel lim.  This will become FPon   % Then we search for the sample where |velocity| > slip vel lim.  This   % will be FPoff.    entry = 1; FPon = []; FPoff = [];   for sac = 1:num_pts(z)     j=1; badPtList = [];        % initialize these crucial items     velSeg = []; posSeg = [];     inLims = []; gapList = [];     inLims1 = []; inLims2 = [];     while( abs(filtvel(saclist(sac)+j,z)) > slipLim+epsV1 )        j = j+1;     end     % which way were we going?     sgn = sign(filtvel(saclist(sac)+j,z));     FPon(entry) = saclist(sac)+j;     % now to find FPoff     velSeg = filtvel(FPon(entry):FPon(entry)+FPupperLim,z);     inLims = find( (velSeg < slipLim+epsV2) & (velSeg > -(slipLim+epsV2)) );     inLims1 = [inLims; 0];     inLims2 = [0; inLims];     pad  = NaN * ones((FPupperLim+5)-length(inLims),1);     limDiff(:,sac) = [abs(inLims1 - inLims2); pad];     badPtList = find(limDiff(:,sac) > gapLim);     gapList = limDiff(badPtList,sac);     % if there were no gaps, swell (rare).  Otherwise we need to determine the     % last good point in the foveation period     if isempty(badPtList)        lastGoodPt = inLims(length(inLims)-1);        disp( [' ' num2str(sac) ' had no gaps.  Hurray.'] )      else        %disp([num2str(sac) ' has a gap of ' mat2str(gapList) ' in "limDiff"'])        % Initially, last good pt is last pt which falls w/in slip lims.            % Then we look at the gaps and see if there is anywhere where they        % sum to be more than 50ms (guess, 8/1/96) in the space of 5 entries.        lastGoodPt = inLims(length(inLims)-1);        for x=1:length(badPtList)           gapSeg = limDiff(badPtList(x):badPtList(x)+4,sac);           endOfTheLine = isnan(sum(gapSeg));           gapSeg = gapSeg( find(gapSeg<100000) );           gapLen = sum(gapSeg);           if (gapLen > gapMaxCutoff) | (endOfTheLine)              whereInList = badPtList(x) - 1;              if whereInList < 1                 whereInList = 1;              end              lastGoodPt = inLims(whereInList)-1;              if lastGoodPt >= FPlowerLim                 foundFP = 1;               else                 foundFP = 0;                 %disp(['lastGoodPt: ' num2str(lastGoodPt)])              end              break  % since we've found a good ending point           end        end %for x...     end %if badPtList...     FPoff(entry) = lastGoodPt+FPon(entry);     % did we find a good fov period?     if (foundFP)        % now we need to check and see if it falls within the foveation         % limits of +/- 0.5 degrees.  If so, then it is a good FP.        posSeg = pos(FPon:FPoff,z);        goodPosPts = find((posSeg < fovLim+epsP2) & (posSeg > -(fovLim+epsP2)));        worstPos = max(abs(posSeg));        goodPosSeg = ( length(goodPosPts)/length(posSeg) >= 0.5 );        if (goodPosSeg) | (isBS)           entry = entry + 1;         else           disp([' ' num2str(sac) ' is outside foveal limits.'])        end      else        disp([' ' num2str(sac) ' has too short a foveation period. (only '...              num2str(lastGoodPt) ' samples long.)'])     end   end  %for sac       this_FPdur = (FPoff - FPon)' * samp_time;   this_FPavg = mean(this_FPdur);   FPdur = [FPdur; this_FPdur];   FPavg = [FPavg; this_FPavg];   disp([' ' num2str(entry-1) ' good FPs.   Avg: ' num2str(this_FPavg) ' ms'] )   %FPmat(:,1) = FPon';   %FPmat(:,2) = FPoff';   %FPmat      if (verbose)      FPon  = [1, FPon, dat_len];      FPoff = [1, FPoff, dat_len];      nSacStr    = [num2str(num_pts(z)) ' saccades.'];      % show velocity w/FPon and FPoff      figure      plot(filtvel(1:dat_len(z),z));hold on      plot(FPon, filtvel(FPon,z), 'go', 'marker', 4)      plot(FPoff, filtvel(FPoff,z), 'co', 'marker', 4)      ylabel( 'Eye Velocity (deg/sec)' )      xlabel( 'Sample Number' )      orient landscape      title( [what_f_array(z,:) '  ' nSacStr] )      % show position w/FPon and FPoff      figure      plot(pos(1:dat_len(z),z));hold on      plot(FPon, pos(FPon,z), 'go', 'marker', 4)      plot(FPoff, pos(FPoff,z), 'co', 'marker', 4)      ylabel( 'Eye Position (deg)' )      xlabel( 'Sample Number' )      orient landscape      title( [what_f_array(z,:) '  ' nSacStr] )      % show histogram for this data record       figure('Name','Foveation Period histogram', 'NumberTitle','off');      orient landscape      [v_numb, v_bins] = hist(this_FPdur,10);      hist(this_FPdur,10);      xlabel('Foveation Period (sec)')      ylabel('Occurrences')      title([what_f_array(z,:) '  ' nSacStr ' Avg: ' num2str(this_FPavg) ' ms'])   endend %for z%let's see the total (all files) distribution as a histogram...if nCols > 1   figure('Name','Foveation Period histogram',...       'NumberTitle','off');   orient landscape   nSacStr = [num2str(sum(num_pts)) ' saccades.'];   [v_numb, v_bins] = hist(FPdur,10);   hist(FPdur,10);   xlabel('Foveation Period (sec)')   ylabel('Occurrences')   title( ['All files  ' nSacStr ' Avg: ' num2str(mean(FPavg)) ' ms'] )endif ~exist( 'export' ) export = 0; endif export   expdir   v_numb = v_numb';   save v_numb.txt v_numb /ascii   v_bins = v_bins';   save v_bins.txt v_bins /ascii   save FPmat.txt FPmat /asciiendif ~exist('debugme') debugme = 0; endif (0) %~debugme   clear sac j x z nRows nCols filtvel num_pts samp_time   clear FPon FPoff FPzero FPmat FPdur FPavg    clear nSacStr saclist epsV1 epsV2 epsP2   clear FPlowerLim FPupperLim slipLim fovLim   clear verbose fileStr entry sgn dat_len   clear this_FPdur this_FPavg foundFP velSeg posSeg   clear inLims inLims1 inLims2 limDiff badPtList    clear gapSeg gapLen gapMaxCutoff whereInList lastGoodPt   clear worstPos goodPosPts goodPosSeg   clear pad v_numb v_binsend