% ln_calc1.m:  using output of desacc & findsaccs, calculate:%  - the avg instantaneous frequency of the nystagmus%  - avg fast-phase PV%  - avg slow-phase vel%  - avg slow-phase init vel%% Freq of desaccaded nystagmus might not be perfect, since voluntary saccades% can affect time between fast phases%% requires:  stripnan.m, maket.m, pfit.m, pfitfun.m% Written by:  Jonathan Jacobs%              October 2003 - April 2004 (last mod 04/07/04)if ~exist('doplot','var'), doplot = 0; end% not all segments are created equal...% check the length to make sure we are not looking at a partial due to % a break in the saccade blanking.  If slow phase > x samples then it is good.sp_start=[]; sp_stop = []; segnum = 1;for i = 1:length(saccstop)-1   spseg = stripnan( vel_desacc(saccstop(i):saccstart(i+1)) );   if ~isempty(spseg)      if length(spseg)> 10 % ??? how long is long enough         sp_start(segnum) = saccstop(i);         sp_stop(segnum)  = saccstart(i+1);         segnum = segnum + 1;      end   endend%%%% find the real fast phases.% calculate the amplitude of the saccade.  sounds simple, but may be a bit% less than totally obvious?% first, find all the REAL fast phases.  yes/no is determined by duration.% May need to add extra accept/reject criteria, e.g. "obviously too big"% that could be applied following this simple test.% this duplicates(?) some functionality in findsaccs.% NOTE: thresh_v was set in 'desacc', and saved to the base workspace in 'findsaccs'eval(['temp_pos=' dataName ';'])temp_vel = d2pt(temp_pos,5,samp_freq);numFPs = 0;fp_lowlim = 10;                 %% shortest possible fast ph, in samplesfp_highlim = 200;clear fpstart fpstopfor i = 1:length(saccstart)  fp_pvel = max(abs(temp_vel(saccstart(i):saccstop(i))));  fplen = saccstop(i) - saccstart(i);  if (fplen>fp_lowlim) & (fplen<fp_highlim) & (fp_pvel>thresh_v)     numFPs = numFPs + 1;     fpstart(numFPs) = saccstart(i);     fpstop(numFPs)  = saccstop(i);  endend% could have done this in previous loop, but may be easier to see this way...% go through list of FP intervals and find max and min positions during each one.% what could possibly go wrong?% one thing that could go wrong: if saccade is not opposing slow phase, then min/max is% potentially flawed.% also NOTE: this method DOES properly ignore dynamic overshoots' effect on position.clear maxind minind maxpt minpt fpmagfor i = 1:numFPs   fpInterval = temp_pos(fpstart(i):fpstop(i));   maxpt(i)  = max(fpInterval);      maxind(i) = find(fpInterval == maxpt(i))+fpstart(i);   minpt(i)  = min(fpInterval);      minind(i) = find(fpInterval == minpt(i))+fpstart(i);   fpmag(i)  = maxpt(i) - minpt(i); end%%% sanity checkfigureplot(temp_pos); hold onplot(maxind,maxpt,'ro'); plot(minind,minpt,'go')% find the points that satisfy foveation criteria and count them% lowest hanging fruit: the slow phases that immediately precede % foveating (and defoveating) saccades.%[numfov,fovWinPts,DFvers]=detectfovs(find(ptlist==1),temp_pos,1,'-');%fovPts = find( abs(temp_pos)<=0.5 & abs(temp_vel)<=4.0 );%mean(temp_pos(fovPts))%std(temp_pos(fovPts))for i = 1:numFPs-1   if saccstart(i+1) - saccstop(i) <= (samp_freq*2);        % 2 seconds?	   sp_pos_seg = temp_pos(saccstop(i):saccstart(i+1));	   sp_vel_seg = temp_vel(saccstop(i):saccstart(i+1));	   fovPts_v   = find( abs(sp_vel_seg) <=4.0 );	   	end   end% peak velocity timings --> instantaneous freq% check the vel of each pv.  if it isn't > some threshold it isn't a "real" saccade% BTW, PV is ABSOLUTE as calculated in findsaccsreal_pv_pts = pvlist(find(pvel>12));isi_samp = real_pv_pts(2:end) - real_pv_pts(1:end-1);isi_sec = isi_samp/samp_freq;inst_freq = 1./(isi_sec);mean_freq=mean(inst_freq);std_freq=std(inst_freq);real_pvel = pvel(find(pvel>thresh_v));mean_pvel = mean(real_pvel);std_pvel = std(real_pvel);%%% do a regression fit of the slow-phase data for more realistic init_SPveltemp1=[]; temp2=[];for i = 1:length(sp_stop)   spseg = stripnan(vel_desacc(sp_start(i):sp_stop(i)));   if ~isempty(spseg)      x=maket(spseg);      [coeff,Rsq,recon]=pfit(x, spseg, 1, 0);    %% approximate a linear fit      init_slow(i) = recon(1);      final_slow(i) = recon(end);      avg_slow(i)  = mean(recon);  %% or should it be mean(abs(recon)) ????      temp1 = [temp1 NaN*ones(1,50) recon'];      temp2 = [temp2 NaN*ones(1,50) spseg'];   endendif doplot   figure; box; hold on   plot(maket(temp1),temp1,'g')   plot(maket(temp2),temp2,'m')end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%mean_fpmag       = mean(abs(stripnan(fpmag)));std_fpmag        = std(abs(stripnan(fpmag)));mean_init_SPvel  = mean(abs(stripnan(init_slow)));std_init_SPvel   = std(abs(stripnan(init_slow)));mean_final_SPvel = mean(abs(stripnan(final_slow)));std_final_SPvel  = std(abs(stripnan(final_slow)));mean_SPvel       = mean(abs(avg_slow));std_SPvel        = std(abs(avg_slow));%mean_init_SPvel  = abs(mean(stripnan(init_slow)));%std_init_SPvel   = abs(std(stripnan(init_slow)));%mean_final_SPvel = abs(mean(stripnan(final_slow)));%std_final_SPvel  = abs(std(stripnan(final_slow)));%mean_SPvel       = abs(mean(avg_slow));%std_SPvel        = abs(std(avg_slow));disp_prec = 5;if (1)   disp( ['Num. of LN fast phases --  ' num2str(length(real_pvel))])   disp( ['Instantaneous freq.    --  ' num2str(mean_freq,disp_prec) ...                                  ' ± ' num2str(std_freq,disp_prec) ' Hz'] )   disp( ['Fast-phase Peak Vel.   --  ' num2str(mean_pvel,disp_prec) ...                                  ' ± ' num2str(std_pvel,disp_prec) ' deg/sec'] )   disp( ['Slow-phase Avg. Vel.   --  ' num2str(mean_SPvel,disp_prec) ...                                  ' ± ' num2str(std_SPvel,disp_prec) ' deg/sec'] )   disp( ['Slow-phase Init. Vel.  --  ' num2str(mean_init_SPvel,disp_prec) ...                                  ' ± ' num2str(std_init_SPvel,disp_prec) ' deg/sec'] )   disp( ['Slow-phase Final Vel.  --  ' num2str(mean_final_SPvel,disp_prec) ...                                  ' ± ' num2str(std_final_SPvel,disp_prec) ' deg/sec'] ) else   disp( ['Avg. instantaneous freq   --  ' num2str(mean_freq) ' Hz'] )   %disp( ['Std. instantaneous freq   --  ' num2str(std_freq) ' Hz'] )   disp( ['Avg. fast-phase Peak Vel  --  ' num2str(mean_pvel) ' deg/sec'] )   %disp( ['Std. fast-phase Peak Vel  --  ' num2str(std_pvel) ' deg/sec'] )   disp( ['Avg. slow-phase init Vel  --  ' num2str(mean_init_SPvel) ' deg/sec'] )   %disp( ['Std. slow-phase init Vel  --  ' num2str(std_init_SPvel) ' deg/sec'] )   disp( ['Avg. slow-phase final Vel --  ' num2str(mean_final_SPvel) ' deg/sec'] )   %disp( ['Std. slow-phase final Vel --  ' num2str(std_final_SPvel) ' deg/sec'] )   disp( ['Avg. slow-phase Velocity  --  ' num2str(mean_SPvel) ' deg/sec'] )   %disp( ['Std. slow-phase Velocity  --  ' num2str(std_SPvel) ' deg/sec'] )endreturn%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    assorted pieces of code%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% plotsfigureplot(pvlist(2:end)/samp_freq,inst_freq)title(['Mean instantaneous frequency = ' num2str(mean_freq)])xlabel('Time (sec)')ylabel('instantaneous freq (Hz)')% fast phases start/stop timingsseg_n = seg2;t=maket(seg_n);vel_n = d2pt(seg_n,4);figureplot(t,seg_n,'c',t,vel_n,'m')hold onplot(saccstart/samp_freq,vel_n(saccstart),'r+')plot(saccstop/samp_freq,vel_n(saccstop),'rx')% peak vel timing on top of vel traceseg_n = seg6;t=maket(seg_n);vel_n = d2pt(seg_n,4);figureplot(t,vel_n,'c',t,vel_desacc,'m')hold onplot(pvlist/samp_freq,vel_n(pvlist),'ro')% peak vel timing on top of pos traceseg_n = seg2;t=maket(seg_n);figureplot(t,seg_n,'c',t,pos_desacc,'m')hold onplot(pvlist/samp_freq,seg_n(pvlist),'ro')