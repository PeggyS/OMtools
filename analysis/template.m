% Analysis routine template.  The main loop concatenates the data for the % files/channels selected by using "PICKDATA".  You then add the analysis% you'd like to do in the indicated space.% written by:  Jonathan Jacobs%              January 1997 (last mod: 01/28/97)% we will go through the control point lists, a column at% a time, extracting the real points from the NaNs. % The stripped column is then used to index into the proper% column of the position data array.  The points are concatenated% into vectors (love that transpose operator) and displayed.%clear all_sacv_on_pts   all_sacp_on_pts %clear all_sacv_off_pts  all_sacp_off_pts %clear all_cycle_beg_pts all_cycle_end_pts %clear all_max_v_pts     all_slow_peak_pts all_sacv_on_pts=[];   all_sacp_on_pts=[]; all_sacv_off_pts=[];  all_sacp_off_pts=[]; all_cycle_beg_pts=[]; all_cycle_end_pts=[]; all_max_v_pts=[];     all_slow_peak_pts=[]; if ~exist( 'sacp_on_mat')   disp( 'You need to run "pickdata" first.' )   returnend[nRows, nCols] = size( sacv_on_mat );for z = 1:nCols   % whack out the 'NaNs'   num_pts = length( find( sacv_on_mat(:,z) < 100000 ) );   num_pts_list(z) = num_pts;   % concatenate the lists of saccade control points   % these are the eight control points defined in the documentation.   % obviously you might not need them all for your particular analysis.   % feel free to remove the ones that aren't necessary.   this_sacv_on     = sacv_on_mat( 1:num_pts,z );   all_sacv_on_pts  = [all_sacv_on_pts' this_sacv_on']';   this_sacp_on     = sacp_on_mat( 1:num_pts,z );   all_sacp_on_pts  = [all_sacp_on_pts; this_sacp_on];   this_sacv_off    = sacv_off_mat( 1:num_pts,z );   all_sacv_off_pts = [all_sacv_off_pts; this_sacv_off];   this_sacp_off    = sacp_off_mat( 1:num_pts,z );   all_sacp_off_pts = [all_sacp_off_pts; this_sacp_off];   this_max_v_pt    = max_v_pt_mat( 1:num_pts,z );   all_max_v_pts    = [all_max_v_pts; this_max_v_pt];   this_slow_peak   = slow_peak_mat( 1:num_pts,z );   all_slow_peak_pts= [all_slow_peak_pts; this_slow_peak];   this_cycle_beg   = cycle_beg_mat( 1:num_pts,z );   all_cycle_beg_pts= [all_cycle_beg_pts; this_cycle_beg];   this_cycle_end   = cycle_end_mat( 1:num_pts,z );   all_cycle_end_pts= [all_cycle_end_pts; this_cycle_end];   % Here's where you insert your analysis code.   % the following commented lines show an example of indexing into   % the pos matrix with the appropriate saccade list.   % next, the calculated data is built into column-oriented vectors    %% calculate and concatenate the saccade mag and max velocity   %% this_saci_dist = abs( pos(this_sacp_on,z) - pos(this_sacv_on,z) );   %% this_sacp_dist = abs( pos(this_sacp_on,z) - pos(this_sacp_off,z) );   %% this_sacf_dist = abs( pos(this_sacv_off,z) - pos(this_sacp_off,z) );   %% saci_dist = [ saci_dist' this_saci_dist' ]';   %% sacp_dist = [ sacp_dist' this_sacp_dist' ]';   %% sacf_dist = [ sacf_dist' this_sacf_dist' ]';   %% true_sac_dist = saci_dist + sacp_dist + sacf_dist;end %for z% Ouside of the main loop is where you might do final statistics for the% analyzed data lists you have built.%%%% do exciting calculations here!!%%disp( ['Print out some fascinating statistic!!: ' num2str(12345)] );disp( ' ' )% now let's plot stufffigure('Name','Figure name',...       'NumberTitle','off');orient landscape% use the plot command herehold offxlabel('x axis label')ylabel('y axis label')orient landscape[num, width] = size(what_files);fileStr   = [num2str(num) ' files loaded.'];nSacStr   = [num2str(total_num) ' saccades.'];if length(what_f_names) > 65   title( [fileStr '  ' nSacStr ] ) else   title( [what_f_names '  ' nSacStr ] )endif ~exist( 'export' ) export = 0; endif export   expdir   % save the data you wish to export as ASCII dataendif ~exist('debugme') debugme = 0; endif ~debugme   clear nRows nCols num_pts z num width   clear this_sacv_on this_sacv_off this_sacp_on this_sacp_off   clear this_cycle_beg this_cycle_end   clear this_sac_dist this_pre_sac_vel    clear this_init_sac_vel this_post_sac_vel   clear all_sacv_on_pts  all_sacp_on_pts    clear all_sacv_off_pts all_sacp_off_pts    clear all_cycle_beg_pts all_cycle_end_pts    clear sac_dist init_sac_vel pre_sac_vel post_sac_vel vel_diff   clear fileStr nSacStr rtitleStr   clear slope inter r_sqr yfit   clear init_sac_vel pre_sac_vel post_sac_vel vel_diff   clear fileStr nSacStr rtitleStr   clear slope inter r_sqr yfitend