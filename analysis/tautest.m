% tautest.m: see how well a tau matrix (usually the average over several% tau matrices) performs for the current loaded eye movement record.% To use this program, you must have the following information loaded:% position & velocity (use "PICKDATA"), sampling frequency, number of% foveations (try the automatic foveation period counting feature in "NFF"),% and a Tau matrix (you can search for one and load it during execution of% this program).% Written by:  Jonathan Jacobs%              March 1998 - April 1998 (last mod: 04/28/98)if ~exist('pos')   pos = [];endif isempty(pos)   disp('You must load a data file, select ONE data trace,')   disp('and calculate its velocity and count the number of')   disp('foveations (try the automatic counting feature in "NFF")')   disp('before you can use "tauTest"')   disp('You also need a "tau" matrix loaded in memory.')   returnend[r,c]=size(pos);if min(r,c)>1   disp('You must pick EXACTLY ONE data set with PICKDATA')   returnendif ~exist('samp_freq')   samp_freq = [];endif isempty(samp_freq)   samp_freq = 0;endif samp_freq == 0   samp_freq = input('Enter the sampling frequency (0 to cancel): ');   if samp_freq==0      disp('Cancelling')      return   endendnumfov=[];initPosArray=[0.5 0.75 1.0 1.25 1.5 2.0 2.5 3.0 3.5 4.0 5.0 6.0];initVelArray=[4.0 5.0 6.0 7.0 8.0 9.0 10.0];posArray=[];velArray=[];pmode = lower(input('Start from 0.5 deg? ','s'));if pmode=='y'   posArray = initPosArray;   velArray = initVelArray; else   startPt = 1000;   while (startPt >= initPosArray(length(initPosArray)))      startPt = input('Start from what position limit? ');   end   velArray = initVelArray;   temp = find(initPosArray>=startPt);   startPtIndex = temp(1);   posArray = initPosArray(startPtIndex:length(initPosArray));endposArrLen=length(posArray);velArrLen=length(velArray);tauInStr = [];disp('Enter the name (case-sensitive) of the Tau matrix to test')tauInStr = input('(Press "RETURN" to look for and load a mat-file): ','s');while isempty(tauInStr)   [f,p]=uigetfile('*.mat','Load a "tau" file:');   eval(['cd ' '''' p ''''])   eval(['load ' '''' f ''''])   whos   disp('Enter the name (case-sensitive) of the Tau matrix to test')   tauInStr = input('(Press "RETURN" to look for and load a mat-file): ','s');endtauIn = eval(tauInStr);[r,c]=size(tauIn);if (r~=posArrLen) & (c~=velArrLen)   if (c~=posArrLen) & (r~=velArrLen)      disp('Tau array dimensions do not match position & velocity limit arrays')      return   endend% initialize the results matricesnafTgt  = zeros(velArrLen, posArrLen);nafpTgt = zeros(velArrLen, posArrLen);% let's loop the loops!for j=1:velArrLen   velLim = velArray(j);   disp(['Calculating for ' num2str(velLim) ' deg/sec'])   for i = 1:posArrLen      posLim = posArray(i);      tau = tauIn(j,i);      % calculate the number of foveations for this particular (posLim,velLim)...      [null1, null2, null4, numfov(j,i), null5, null6]= ...               nff(pos,vel,samp_freq,[posLim,velLim],'showpv');      % ...and use it to calculate the NAFx.      [nafTgt(j,i),nafpTgt(j,i),nul1,nul2,nul3,nul4] = ...                nff(pos,vel,samp_freq,numfov(j,i),'naf',[tau,posLim,velLim]);   endend% draw a pretty picturefiguresurf(posArray, velArray, nafTgt)%mesh(posArray, velArray, tauNAF)title(['NAF for Tau matrix "' tauInStr '" checked against file ' what_f_array])xlabel('Position Limit')ylabel('Velocity Limit')zlabel('NAF')rotplot