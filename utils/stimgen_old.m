% stimgen.m: A primitive CLI program to generate stimuli used by the LabVIEW% acquisition/analog outpt VI.   STIMGEN prompts the user for the duration of% stimulus, and for breakpoint/amplitude values.% The sampling frequency is 100 Hz, a value that was set by acq_disp_AO.vi% therefore times can be specified only within 0.01 seconds.% Usage: stim = stimgen;  (use of an output variable is optional)%% NOTE: stimgen creates LINEAR segments.  Higher order fits%       (polynomial/exponential) might be considered at a later date.% Written by:  Jonathan Jacobs%              August 1998 - July 2005 (last mod: 07/13/05)function out = stimgen(null);samptemp = [];maxampl = 40;samptemp = input('What is the sampling frequency for the stimulus? <default=100 Hz> ');if isempty(samptemp), samptemp = 100; endinitialpath = pwd;t_or_s = ' ';while t_or_s(1) ~= 't' & t_or_s(1) ~= 's'	t_or_s = lower(input('Use (T)ime or (S)ample number? ','s'));	if t_or_s ~= 's'		tstr = 'seconds';		sampf = samptemp;	 else		tstr = 'samples';		sampf = 1;	endendbs = ' ';while bs(1) ~= 'b' & bs(1) ~= 's' bs = lower(input('Define by (B)reakpoint time or (S)egment duration? ','s'));enddisp(' ')cycledur=-1;promptstr = ['Enter the duration of one cycle of the stimulus in ' tstr ': '];while cycledur<=0, cycledur=input(promptstr); endamplvect = NaN*ones(cycledur*sampf,1);figure('pos', [631   439   560   420]); box; grid; hold onplot([0 cycledur],[NaN NaN]);xlabel('Time (sec)')ylabel('Stimulus Amplitude (deg)')title('STIMGEN output')ampl = [-10000];if(bs(1)=='s')	disp(' ')	disp('You will be prompted to enter durations and amplitudes')	disp('for each segment of the stimulus.  The program will keep')	disp('accepting inputs until you enter a segment that reaches or exceeds')	disp('the duration of the stimulus.')	disp(' ')   segnum=1; running_dur=0; segbeg = [1/sampf]; 	%% 1st breakpoint is always 1/sampf      %% enter segment durations.  the breakpoint times will be calculated 	while (running_dur < cycledur)      %segment duration	   temp_seg_dur = 0;	   while temp_seg_dur <= 0	      temp_seg_dur = input(['Enter the duration of the segment in ' tstr ': ']);	   end               		   running_dur = min(temp_seg_dur+running_dur, cycledur);      segend(segnum)   = segbeg(segnum)+temp_seg_dur-1/sampf;      segbeg(segnum+1) = segbeg(segnum)+temp_seg_dur;      % segment start amplitude		ampl_beg(segnum) = -10000;	   while abs(ampl_beg(segnum))>maxampl	      ampl_beg(segnum) = input(['Enter the amplitude for the start of the segment.'...	                                '(time T = ' num2str(segbeg(segnum)) ' ' tstr '): ']);		end      % segment end amplitude	   ampl_end(segnum) = -10000;	   while abs(ampl_end(segnum))>maxampl   	      ampl_end(segnum) = input(['Enter the amplitude for the end of the segment.'...	      								  '(time T = ' num2str(segend(segnum)) ' ' tstr '): ']);	   end	   disp(' ')	   	   	   % make the segment.		ampldelta = ampl_end(segnum) - ampl_beg(segnum);		timevect = [fix(segbeg(segnum)*sampf) : fix(segend(segnum)*sampf)];	   		%generate a new segment if there is more than one point		if length(timevect)>1 			if ampldelta				%calculated segment				amplvect(timevect) = ...						  [ampl_beg(segnum) : ampldelta/(length(timevect)-1) : ampl_end(segnum)];			  else				%constant segment				amplvect(timevect) = ampl_beg(segnum)*ones(size(timevect));			end		 else			disp('seglen == 1');			return			%amplvect(timevect)=ampl(ind+1);		end   		% plot the segment		tempLin1H = plot(timevect/sampf,amplvect(timevect));		% plot line connecting new segment to previous segment		if segnum>1		   tempLin2H = line([segend(segnum-1) segbeg(segnum)], ...		   					  [ampl_end(segnum-1) ampl_beg(segnum)]);		end				segnum=segnum+1;	end elseif(bs(1)=='b')	disp(' ')	disp('You will be prompted to enter breakpoints and amplitudes')	disp('for each segment of the stimulus.  The program will keep')	disp('accepting inputs until you enter the breakpoint equal to')	disp('the duration of the stimulus.')	disp(' ')   ind = 1;   while abs(ampl(1))>maxampl      ampl(1) = input(['Enter the amplitude at time T = 0 ' tstr ': ']);   end   disp(' ')      bp = [0];   %% enter breakpoint times directly 	while (bp(ind) < cycledur)	   ind=ind+1;	   bp(ind)=-100000;	   while bp(ind) < bp(ind-1)	      temp = input(['Enter the time of breakpoint ' num2str(ind)...	                  ' in ' tstr ': ']);	      bp(ind) = fix(temp*sampf)/sampf; 	      if bp(ind) == bp(ind-1)	         disp('*** Same as previous breakpoint -- adjusting by one timestep. ***')	         bp(ind) = bp(ind)+ 1/sampf;	      end	   end	   ampl(ind) = -1000;	   while abs(ampl(ind))>maxampl   	      ampl(ind) = input(['Enter the amplitude at time T = '...	                        num2str(bp(ind)) ' ' tstr ': ']);	   end	   disp(' ')		ampldelta = ampl(ind) - ampl(ind-1);		timevect = [fix(bp(ind-1)*sampf)+1 : fix(bp(ind)*sampf)];		%generate a new segment if there is more than one point		if length(timevect)>1 			if ampldelta				%calculated segment				amplvect(timevect) = ...						  [ampl(ind-1) : ampldelta/(length(timevect)-1) : ampl(ind)];			  else				%constant segment				amplvect(timevect) = ampl(ind-1)*ones(size(timevect));			end		 else			%disp('seglen == 1');			amplvect(timevect)=ampl(ind);		end   		tempLin1H = plot(timevect/sampf,amplvect(timevect))		if ind>2		   tempLin2H = line([bp(ind-2) bp(ind-1)], [ampl(ind-2) ampl(ind-1)])		end	end	[ampl; bp];end%amplvect=amplvect';% show multi-cycle stimulustemp = [];numcycles = input('Enter the number of cycles for the TOTAL stimulus: ');if numcycles > 1	for k=1:numcycles	  temp  = [temp; amplvect];	end	amplvect = temp;      	figure	t=maket(amplvect,sampf);	plot(t,amplvect)	xlabel(['Time (' tstr ')'])	ylabel('Stimulus Amplitude (deg)')	title('STIMGEN output')enddisp(' ')disp('If you are happy with this result, you can save it as an ASCII file')disp('Otherwise, run "STIMGEN" again.')yorn=lower(input('Write this to file (y/n)? ','s'));file = 0;if yorn=='y'   [file, path] = uiputfile('*.stm', 'Save As');endif file == 0   %disp('No file written.')   eval(['cd ' '''' initialpath ''''])   returnendif isempty(findstr(file, '.stm'))   file = [file '.stm'];endeval(['cd ' '''' path ''''])eval(['save ' file ' amplvect  -ascii'])disp(['"' file '" written to "' path '"'])% if 'filetype.m' and 'filetype.mex' are present we will use 'emcomp=computer;%if strcmp(comp,'MAC2') & exist('filetype.m') == 2 & exist('filetype.mex') == 3%   [oldtype,oldcreator]=filetype(file,'TEXT','R*ch');%end%eval(['cd ' '''' initialpath ''''])if nargout == 0   return else   out = amplvect;end