% setmdlp.m: GUI to display/change the programatically settable% parameters for the CN/LMLN model.% USAGE: setmdlp  %% NOTE: if you make a variable 'create' with a zon-zero value, then 'setmdlp'% will prompt you to create a new parameter set.%% See also SHOWTPS and LOADMDLP% written by:  Jonathan Jacobs%              December 1999 - May 2013 (last mod:  05/31/13)% updated to work with modern MATLAB requirements for 3rd-party toolbox locations% updated to 26-variable modelfunction setmdlp(~)global mdlparamlist lastsave lastload mdlname paramsetname saved mdlparamWinH varH numVarsmdlparamwind = findme('MdlParamWindow');if mdlparamwind > 0   figure(mdlparamwind)   returnendmdlNameDefault = 'testbed';paramSetNameDefault = 'unknown';% Variable description stringsenvStr( 1,:) = 'PMC Gain          ';  x_pos( 1) = 5;    y_pos( 1) = 375;envStr( 2,:) = 'PMC tau2 (ms)     ';  x_pos( 2) = 5;    y_pos( 2) = 350;envStr( 3,:) = 'PMC tau3 (ms)     ';  x_pos( 3) = 5;    y_pos( 3) = 325;envStr( 4,:) = 'Vel. noise        ';  x_pos( 4) = 5;    y_pos( 4) = 300;envStr( 5,:) = 'CNS Gain          ';  x_pos( 5) = 5;    y_pos( 5) = 275;envStr( 6,:) = 'Tonic Gain        ';  x_pos( 6) = 5;    y_pos( 6) = 250;envStr( 7,:) = 'Phasic Gain       ';  x_pos( 7) = 5;    y_pos( 7) = 225;envStr( 8,:) = 'Sacc Refract (ms) ';  x_pos( 8) = 5;    y_pos( 8) = 200;envStr( 9,:) = 'SP Gain           ';  x_pos( 9) = 5;    y_pos( 9) = 175;envStr(10,:) = 'Alexander''s Law   '; x_pos(10) = 5;    y_pos(10) = 150;envStr(11,:) = 'Vel Recon. LP Filt';  x_pos(11) = 5;    y_pos(11) = 125;envStr(12,:) = 'Light(1)/Dark(0)  ';  x_pos(12) = 5;    y_pos(12) = 100;envStr(13,:) = 'FS On/Off         ';  x_pos(13) = 210;  y_pos(13) = 375;envStr(14,:) = 'FS Scale          ';  x_pos(14) = 210;  y_pos(14) = 350;envStr(15,:) = 'FS Delay Calc (ms)';  x_pos(15) = 210;  y_pos(15) = 325;envStr(16,:) = 'BS On/Off         ';  x_pos(16) = 210;  y_pos(16) = 300;envStr(17,:) = 'BS Scale          ';  x_pos(17) = 210;  y_pos(17) = 275;envStr(18,:) = 'BS/FS Vel crit    ';  x_pos(18) = 210;  y_pos(18) = 250;envStr(19,:) = 'BS/FS Acc crit    ';  x_pos(19) = 210;  y_pos(19) = 225;envStr(20,:) = 'Vol Sacc On/Off   ';  x_pos(20) = 210;  y_pos(20) = 200;envStr(21,:) = 'not currently used';  x_pos(21) = 210;  y_pos(21) = 175;envStr(22,:) = 'not currently used';  x_pos(22) = 210;  y_pos(22) = 150;envStr(23,:) = 'not currently used';  x_pos(23) = 210;  y_pos(23) = 125;envStr(24,:) = 'Attention_Level   ';  x_pos(24) = 210;  y_pos(24) = 100;envStr(25,:) = 'Tenotomy_Effect   ';  x_pos(25) = 210;  y_pos(25) = 75;envStr(26,:) = 'G_Angle_Variation ';  x_pos(26) = 210;  y_pos(26) = 50;[numVars, null] = size(envStr);LASTPLACE = numVars + 1;x_pos(LASTPLACE)=175; y_pos(LASTPLACE)=35;% attempt to load the last settingsfail = 0;  cdfail= 0;saved = 0;currentdir=pwd;cd(matlabroot);try   cd(findomprefs)catch    cdfail=1;endif cdfail   disp('No ''omPrefs'' directory found.')   cd(findomtools)   disp('Creating ''omPrefs'' directory in ''OMtools'' to store ''mdlparams.mat''')   mkdir('omPrefs')endtry   load mdlparams.matcatch   fail=1;endif ~fail && length(mdlparamlist)<20   disp('Parameter list (mdlparamlist) is corrupted.')   disp('Create a new parameter set using the "New" button.')   ! rm mdlparams.mat   fail=1;endcd(currentdir)% stick some zeros on the end of the list to allow for the addition of more params% at a later date while still letting us read old parameter settings filesif ~fail   mdlparamlist = [mdlparamlist, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];   mdlparamlist = mdlparamlist(1:numVars);end% do the varialbles exist?if ~exist('lastsave','var'),     lastsave = ''; endif ~exist('lastload','var'),     lastload = ''; endif ~exist('mdlname','var'),      mdlname  = ''; endif ~exist('paramsetname','var'), paramsetname = paramSetNameDefault; endif ~exist('create','var'),       create   = 0;  endif ~exist('saved','var'),        saved    = 0;  endif ~exist(mdlname,'file'),       mdlname = mdlNameDefault; end% are the directory variables good?if ~exist(lastsave,'dir'), lastsave = ''; endif ~exist(lastload,'dir'), lastload = ''; endif isempty(lastsave), omdir; lastsave = pwd; endif isempty(lastload), omdir; lastload = pwd; end%if ~(exist(paramsetname)==2), paramsetname = paramSetNameDefault; endif fail || create   disp('Last settings not found.')   choice1 = lower(input('(L)oad existing set or (C)reate new set? ','s'));   if choice1 == 'l'      [fn,pn] = uigetfile('Load an existing model parameter file:', '*.mat');      eval('cd(pn)')      eval(['load ' fn])      lastload = pn;     else       % create a default Normal set.       disp('Creating a default ''Normal'' set.  You can create other default parameter')       disp('sets by clicking the ''New set...'' control in the lower left of the window.')       setmdlact('create', 2)   end   cd(matlabroot)   cd(findomprefs)   save mdlparams.mat mdlparamlist lastsave lastload mdlname paramsetname saved   cd(currentdir)	 else   %disp('Loading last parameter set')end%%% last sanity checkif length(mdlparamlist)<numVars   disp('Some parameters are missing: load a new set!')end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% set up the uifig_width = 400;%fig_height = (25*numVars) + 40;fig_height = 400;startXPos = 20;startYPos = (480 - fig_height)/2;mdlparamWinH = figure(999999);set(mdlparamWinH,'pos',[startXPos, startYPos, fig_width, fig_height],...       'Resize', 'off', 'Name', ['Model Params: ' paramsetname],...       'NumberTitle', 'off', 'NextPlot', 'new',...       'MenuBar', 'none',...       'Tag', 'MdlParamWindow');if ~saved   titlestr = get(mdlparamWinH,'Name');   set(mdlparamWinH,'Name', ['*' titlestr]);endfor j = 1:numVars   uicontrol('Style', 'text', 'Units', 'pixels',...      'Position',[x_pos(j) y_pos(j) 130 22],...        'String', envStr(j,:) )         varH(j) = uicontrol('Style','edit','Units','pixels',...      'BackgroundColor','magenta','ForeGroundColor','white',...      'Position',[x_pos(j)+130 y_pos(j) 58 25],...      'String',num2str(mdlparamlist(j)),...      'UserData',j,'Tag', '',...      'Callback', 'setmdlact(''setvar'',0)');end% set up the UI buttonsnewH = uicontrol('Style','popup','Units','pixels',...    'Position',[2 5 110 20],...    'String','New set...|Normal|INS Pend|INS JL|INS JR|FMNS',...    'UserData','','Tag','',...    'Callback', 'setmdlact(''new_set'', 0 );' );saveH = uicontrol('Style','push','Units','pixels',...    'Position',[115 5 55 20],...    'String','Save as...',...    'UserData','','Tag','',...    'Callback', 'setmdlact(''save'', 0);' );loadH = uicontrol('Style','push','Units','pixels',...    'Position',[175 5 55 20],...    'String','Load...',...    'UserData','','Tag','',...    'Callback', 'setmdlact(''load'', 0);' );applyH = uicontrol('Style','push','Units','pixels',...    'Position',[235 5 50 20],...    'String','Apply',...    'UserData','','Tag','',...    'Callback', 'setmdlact(''apply'', 0);' );cancelH = uicontrol('Style','push','Units','pixels',...    'Position',[290 5 50 20],...    'String','Cancel',...    'UserData','','Tag','',...    'Callback', 'setmdlact(''cancel'',0);');               doneH = uicontrol('Style','push','Units','pixels',...    'Position',[345 5 50 20],...    'String','Done',...    'UserData','','Tag','',...    'Callback', 'setmdlact(''done'', 0);' );uicontrol('Style', 'text', 'Units', 'pixels',...   'Visible','off',...   'Position',[x_pos(LASTPLACE) y_pos(LASTPLACE) 90 20],...     'String', 'Model: ', 'HorizontalAlignment','Right' )      mdlNameH = uicontrol('Style','edit','Units','pixels',...   'Visible','off',...   'BackgroundColor','magenta','ForeGroundColor','white',...   'Position',[x_pos(LASTPLACE)+90 y_pos(LASTPLACE) 60 20],...   'String',mdlname,...   'UserData',LASTPLACE,'Tag', '',...      'Callback','mdlname = get(gco,''String''),');% wouldn't it be neat to have a button to run the model?runH = uicontrol('Style','push','Units','pixels',...   'Visible','off',...   'Position',[x_pos(LASTPLACE)+1 y_pos(LASTPLACE)+1 45 18],...   'BackgroundColor','red','ForeGroundColor','white',...   'String','Run',...   'UserData',LASTPLACE,'Tag', '',...   'Callback', 'eval([''sim( mdlname )'']);' );%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function setmdlact(action, value)global mdlparamlist lastsave lastload mdlname paramsetname saved mdlparamWinH varH numVarsswitch(action)  case('new_set')    %disp('setmdlact:new')    if value == 0       value = get(gco,'Value');    end    switch(value)      case(0)         % should never happen      case(1)         % nothing to do      case(2)	    % Normal         paramsetname = 'Normal Default'; 	    mdlparamlist = [ 1.1   35     30   0.0000     1.0 ...    % 1 - 5						 5.0  1.0   50.0     0.95   -0.03 ...    % 6 - 10						   0    1      0        1      60 ...    % 11 - 15						   0    1      7       40       0 ...    % 16 - 20						   0    0      0        1       1 ...    % 21 - 25						   0    0	   0		0		0];      % 26 - 30      case(3)	   % INS Pendular	   paramsetname = 'INS Pendular Default'; 	   mdlparamlist = [3.025   35     40   0.0001     1.0 ...    % 1 - 5						 5.0  1.0    50.0    0.95   -0.03 ...    % 6 - 10						   0    1      1        1      60 ...    % 11 - 15						   1    1      7       40       0 ...    % 16 - 20						   0    0      0        1       1 ...    % 21 - 25						   0    0	   0		0		0];      % 26 - 30      case(4)	    % INS Jerk Right        paramsetname = 'INS JR Default'; 	    mdlparamlist = [ 1.1    35     40    0.00     1.0 ...    % 1 - 5						 5.0  1.0   50.0     0.95   -0.03 ...    % 6 - 10						   0    1      0        1      60 ...    % 11 - 15						   0    1      7       40       0 ...    % 16 - 20						   1    1      3        1       1 ...    % 21 - 25						   0    0	   0		0		0];      % 26 - 30				         case(5)	    paramsetname = 'INS JL Default'; 	    % JLefdefaultlist 	    mdlparamlist = [ 1.1    35     40   0.00      1.0 ...    % 1 - 5						 5.0  1.0   50.0     0.95   -0.03 ...    % 6 - 10						   0    1      0        1      60 ...    % 11 - 15						   0    1      7       40       0 ...    % 16 - 20						   1    2     -3        1       1 ...    % 21 - 25						   0    0	   0		0		0];      % 26 - 30      case(6)	    % FMNS	    paramsetname = 'FMNS Default'; 	    mdlparamlist = [ 1.1   35     30   0.0001     1.0 ...    % 1 - 5						 5.0  1.0   50.0     0.95   -0.03 ...    % 6 - 10						   0    1      0        1      60 ...    % 11 - 15						   0    1      7       40       0 ...    % 16 - 20						   0    0      0        1       1 ...    % 21 - 25						   0    0	   0		0		0];      % 26 - 30   end %value   set(gcf,'name',['Model Params: ' paramsetname])   %set control values   for j = 1:numVars      set( varH(j),'String', num2str(mdlparamlist(j)) )   end   set(gco,'Value',1)   %cd(findomprefs)   %save mdlparams.mat mdlparamlist lastsave lastload mdlname paramsetname saved         case('setvar')    %disp('setmdlact:setvar')	which=get(gco,'UserData');	newVal = str2double(get(varH(which), 'String'));	titlestr = get(mdlparamWinH,'Name');	if ~strcmp(titlestr(1), '*')	   saved = 0;	   set(mdlparamWinH,'Name', ['*', titlestr]);	end	mdlparamlist(which) = newVal;  case('load')    %disp('setmdlact:load')	setmdlp_tmp=pwd;	set(gco,'Userdata',setmdlp_tmp);	eval(['cd(' '''' lastload '''' ')']);	[fn,pn]=uigetfile('*.mat');	if fn == 0, cd(setmdlp_tmp); return; end;	newlastload = pn;	eval('load([pn fn])');	cd(matlabroot); cd(findomprefs);	paramsetname = fn;	lastload = newlastload;	save mdlparams.mat mdlparamlist lastsave lastload mdlname paramsetname saved;	close(mdlparamWinH);	setmdlp;	cd(setmdlp_tmp);	clear setmdlp_tmp;   case('save')    %disp('setmdlact:save')	setmdlp_tmp=pwd;	set(gco,'Userdata',setmdlp_tmp);	eval(['cd(' '''' lastsave '''' ')' ]);	[fn,pn]=uiputfile('*.mat','Save these params as a ".mat" file');	if fn == 0, cd(setmdlp_tmp); return; end;	lastsave = pn;	paramsetname = fn;	set(mdlparamWinH,'Name',['Model Params: ' paramsetname]);	cd(matlabroot); cd(findomprefs);	saved=1;	save mdlparams.mat mdlparamlist lastsave lastload mdlname paramsetname saved;	eval('cd(pn)');	eval(['save ' '''' fn '''' ' mdlparamlist lastsave lastload mdlname paramsetname saved']);	titlestr = get(mdlparamWinH,'Name');	if strcmp(titlestr(1) ,'*')	   set(mdlparamWinH,'Name', titlestr(2:end));	end	saved=0; 	cd(setmdlp_tmp);	clear setmdlp_tmp;    case('apply')    %disp('setmdlact:apply')	cd(matlabroot); cd(findomprefs);	save mdlparams.mat mdlparamlist lastsave lastload mdlname paramsetname saved;	  case('cancel')    %disp('setmdlact:cancel')	close(mdlparamWinH);	clear global mdlparamlist lastsave lastload mdlname paramsetname saved mdlparamWinH  case('done')    %disp('setmdlact:done')	setmdlp_tmp=pwd;	set(gco,'Userdata',setmdlp_tmp);	cd(matlabroot); cd(findomprefs);	save mdlparams.mat mdlparamlist lastsave lastload mdlname paramsetname saved;	close(mdlparamWinH);	clear global mdlparamlist lastsave lastload mdlname paramsetname saved mdlparamWinH	cd(setmdlp_tmp);	clear setmdlp_tmp;end %action