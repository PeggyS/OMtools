function [ret,x0,str,ts,xts]=rstint2(t,x,u,flag);%RSTINT2	is the M-file description of the SIMULINK system named RSTINT2.%	The block-diagram can be displayed by typing: RSTINT2.%%	SYS=RSTINT2(T,X,U,FLAG) returns depending on FLAG certain%	system values given time point, T, current state vector, X,%	and input vector, U.%	FLAG is used to indicate the type of output to be returned in SYS.%%	Setting FLAG=1 causes RSTINT2 to return state derivatives, FLAG=2%	discrete states, FLAG=3 system outputs and FLAG=4 next sample%	time. For more information and other options see SFUNC.%%	Calling RSTINT2 with a FLAG of zero:%	[SIZES]=RSTINT2([],[],[],0),  returns a vector, SIZES, which%	contains the sizes of the state vector and other parameters.%		SIZES(1) number of states%		SIZES(2) number of discrete states%		SIZES(3) number of outputs%		SIZES(4) number of inputs%		SIZES(5) number of roots (currently unsupported)%		SIZES(6) direct feedthrough flag%		SIZES(7) number of sample times%%	For the definition of other parameters in SIZES, see SFUNC.%	See also, TRIM, LINMOD, LINSIM, EULER, RK23, RK45, ADAMS, GEAR.% Note: This M-file is only used for saving graphical information;%       after the model is loaded into memory an internal model%       representation is used.% the system will take on the name of this mfile:sys = mfilename;new_system(sys)simver(1.3)if (0 == (nargin + nargout))     set_param(sys,'Location',[4,201,788,588])     open_system(sys)end;set_param(sys,'algorithm',     'RK-45')set_param(sys,'Start time',    '0.0')set_param(sys,'Stop time',     '2.0')set_param(sys,'Min step size', '0.001')set_param(sys,'Max step size', '0.001')set_param(sys,'Relative error','1e-3')set_param(sys,'Return vars',   '')add_block('built-in/Integrator',[sys,'/','Integrator'])set_param([sys,'/','Integrator'],...		'position',[590,260,610,280])add_block('built-in/Constant',[sys,'/','Constant'])set_param([sys,'/','Constant'],...		'Value','-1',...		'position',[440,5,460,25])add_block('built-in/Product',[sys,'/','Product2'])set_param([sys,'/','Product2'],...		'orientation',2,...		'position',[445,118,475,142])add_block('built-in/Gain',[sys,'/','Gain'])set_param([sys,'/','Gain'],...		'orientation',2,...		'Gain','1000',...		'position',[540,127,565,153])add_block('built-in/Sum',[sys,'/','Sum3'])set_param([sys,'/','Sum3'],...		'position',[525,260,545,280])add_block('built-in/Sum',[sys,'/','Sum2'])set_param([sys,'/','Sum2'],...		'position',[575,55,595,75])add_block('built-in/Saturation',[sys,'/','Saturation'])set_param([sys,'/','Saturation'],...		'Lower Limit','0.0',...		'Upper Limit','1.0',...		'position',[495,58,525,82])add_block('built-in/Gain',[sys,'/','Gain2'])set_param([sys,'/','Gain2'],...		'Gain','1000',...		'position',[435,57,460,83])add_block('built-in/Sum',[sys,'/','Sum'])set_param([sys,'/','Sum'],...		'position',[390,60,410,80])add_block('built-in/Constant',[sys,'/','Constant1'])set_param([sys,'/','Constant1'],...		'Value','-0.05',...		'position',[320,5,340,25])add_block('built-in/Dead Zone',[sys,'/','Dead Zone'])set_param([sys,'/','Dead Zone'],...		'Lower_value','0.05',...		'Upper_value','-0.05',...		'position',[320,62,350,88])add_block('built-in/Outport',[sys,'/','Outport'])set_param([sys,'/','Outport'],...		'position',[705,260,725,280])add_block('built-in/Inport',[sys,'/','Inport'])set_param([sys,'/','Inport'],...		'position',[240,265,260,285])add_block('built-in/Abs',[sys,'/','Abs'])set_param([sys,'/','Abs'],...		'position',[320,263,350,287])add_line(sys,[530,70;570,70])add_line(sys,[465,70;490,70])add_line(sys,[465,15;550,15;550,60;570,60])add_line(sys,[535,140;515,140;515,135;480,135])add_line(sys,[615,270;655,270;655,140;570,140])add_line(sys,[600,65;640,65;640,115;515,115;515,125;480,125])add_line(sys,[550,270;585,270])add_line(sys,[415,70;430,70])add_line(sys,[355,75;385,75])add_line(sys,[345,15;370,15;370,65;385,65])add_line(sys,[655,270;700,270])add_line(sys,[440,130;415,130;415,220;490,220;490,265;520,265])add_line(sys,[355,275;520,275])add_line(sys,[265,275;315,275])add_line(sys,[385,275;385,225;240,225;240,75;315,75])drawnow% Return any arguments.if (nargin | nargout)	% Must use feval here to access system in memory	if (nargin > 3)		if (flag == 0)			eval(['[ret,x0,str,ts,xts]=',sys,'(t,x,u,flag);'])		else			eval(['ret =', sys,'(t,x,u,flag);'])		end	else		[ret,x0,str,ts,xts] = feval(sys);	endelse	drawnow % Flash up the model and execute load callbackend